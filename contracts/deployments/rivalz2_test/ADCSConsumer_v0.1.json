{
  "address": "0x69217bb653649bB06235dae64e3F2E27e786E435",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coordinator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedBool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedBytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedBytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedStringAndBool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedUint256",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract IADCSCoordinator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastestMemeCoin",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "response",
              "type": "bool"
            }
          ],
          "internalType": "struct ADCSConsumerBase.StringAndBool",
          "name": "response",
          "type": "tuple"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "response",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        }
      ],
      "name": "requestBoolData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        }
      ],
      "name": "requestBytes32Data",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        }
      ],
      "name": "requestBytesData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        }
      ],
      "name": "requestMemeData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_to",
          "type": "string"
        }
      ],
      "name": "requestUint256Data",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd501dcf73af5158229c90c263eff3f93743e5dbd8876fd16be8d5689f969efa6",
  "receipt": {
    "to": null,
    "from": "0x8b736035BbDA71825e0219f5FE4DfB22C35FbDDC",
    "contractAddress": "0x69217bb653649bB06235dae64e3F2E27e786E435",
    "transactionIndex": 1,
    "gasUsed": "2538053",
    "logsBloom": "0x
    "blockHash": "0x82c39f0c1a48f9847d47a8d4b4783a32a8cb15e5f0bbf49c0d7533f260c9287c",
    "transactionHash": "0xd501dcf73af5158229c90c263eff3f93743e5dbd8876fd16be8d5689f969efa6",
    "logs": [],
    "blockNumber": 13685308,
    "cumulativeGasUsed": "2538053",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7f29F190708fe0d3a32011C13567DDCB4ba9B8df"
  ],
  "numDeployments": 5,
  "solcInputHash": "21cf526338744488951944b472ad1beb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedStringAndBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedUint256\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IADCSCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastestMemeCoin\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"internalType\":\"struct ADCSConsumerBase.StringAndBool\",\"name\":\"response\",\"type\":\"tuple\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"response\",\"type\":\"uint256\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"}],\"name\":\"requestBoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"}],\"name\":\"requestBytes32Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"}],\"name\":\"requestBytesData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"requestMemeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_to\",\"type\":\"string\"}],\"name\":\"requestUint256Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mock/MockADCSConsumer.sol\":\"MockADCSConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ADCSConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IADCSCoordinator.sol\\\";\\n\\nabstract contract ADCSConsumerBase {\\n    using ADCS for ADCS.Request;\\n\\n    struct StringAndBool {\\n        string name;\\n        bool response;\\n    }\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    mapping(bytes32 => bytes4) private sTypeIdToFunctionSelector;\\n    IADCSCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _adcsResponseCoordinator address of ADCSCoordinator contract\\n     */\\n    constructor(address _adcsResponseCoordinator) {\\n        COORDINATOR = IADCSCoordinator(_adcsResponseCoordinator);\\n\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint256\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint256\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"stringAndbool\\\"))] = COORDINATOR\\n            .fulfillDataRequestStringAndBool\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @param typeId the reponse type ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(\\n        bytes32 jobId,\\n        bytes32 typeId\\n    ) internal view returns (ADCS.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sTypeIdToFunctionSelector[typeId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa1030108fcef4a9ed262e889c3110a0de6c67a6a6d5cc344914ec082935c9909\",\"license\":\"MIT\"},\"src/ADCSConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ADCSConsumerBase.sol\\\";\\n\\nabstract contract ADCSConsumerFulfillUint256 is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBool is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBytes32 is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBytes is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillStringAndBool is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, StringAndBool memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        StringAndBool memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x83a0b1eb7cd2681fc73b9f30c6235e90601c390dec59623768ffd25310a85b6b\",\"license\":\"MIT\"},\"src/interfaces/IADCSCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IADCSCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IADCSCoordinator is IADCSCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x675f3774f7561f7d2f74f9dac020bad81154f1bba3af7d4c22e57e595a9e7769\",\"license\":\"MIT\"},\"src/interfaces/IADCSCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/ADCS.sol\\\";\\n\\ninterface IADCSCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bytes32 jobId;\\n    }\\n\\n    struct StringAndBool {\\n        string name;\\n        bool response;\\n    }\\n\\n    function requestData(\\n        uint32 callbackGasLimit,\\n        ADCS.Request memory req\\n    ) external returns (uint256);\\n\\n    function fulfillDataRequestUint256(\\n        uint256 requestId,\\n        uint256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestStringAndBool(\\n        uint256 requestId,\\n        StringAndBool memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7391cdf3b7ec2b12a112e1b4d68677827b3eb40f2846dd54b3246998f8c6cf55\",\"license\":\"MIT\"},\"src/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     */\\n    function setConfig(uint32 maxGasLimit, uint32 gasAfterPaymentCalculation) external;\\n\\n    function pendingRequestExists(address consumer, uint64 nonce) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n}\\n\",\"keccak256\":\"0x2cce5a34fc50282f7c1a8340ef18c50b8e9785f01d63f3ac9d02a985d7ae603a\",\"license\":\"MIT\"},\"src/libraries/ADCS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary ADCS {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (ADCS.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0x5c143d8c51913e10b156ad7f83a6b58b905b68c7b6aaa68982cd4ba60eb8d6c2\",\"license\":\"MIT\"},\"src/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"src/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/mock/MockADCSConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ADCSConsumerFulfill.sol\\\";\\n\\ncontract MockADCSConsumer is\\n    ADCSConsumerFulfillUint256,\\n    ADCSConsumerFulfillBool,\\n    ADCSConsumerFulfillBytes32,\\n    ADCSConsumerFulfillBytes,\\n    ADCSConsumerFulfillStringAndBool\\n{\\n    using ADCS for ADCS.Request;\\n    uint256 public lastUint256;\\n    bool public lastBool;\\n    bytes32 public lastBytes32;\\n    bytes public lastBytes;\\n\\n    StringAndBool public lastestMemeCoin;\\n\\n    event DataRequestedUint256(uint256 indexed requestId);\\n    event DataRequestedBool(uint256 indexed requestId);\\n    event DataRequestedBytes32(uint256 indexed requestId);\\n    event DataRequestedBytes(uint256 indexed requestId);\\n    event DataRequestedStringAndBool(uint256 indexed requestId);\\n\\n    constructor(address _coordinator) ADCSConsumerBase(_coordinator) {}\\n\\n    function requestUint256Data(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId,\\n        string memory _from,\\n        string memory _to\\n    ) external returns (uint256 requestId) {\\n        bytes32 typeId = keccak256(abi.encodePacked(\\\"uint256\\\"));\\n        ADCS.Request memory req = buildRequest(_jobId, typeId);\\n        req.add(\\\"from\\\", _from);\\n        req.add(\\\"to\\\", _to);\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedUint256(requestId);\\n    }\\n\\n    function requestBoolData(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId,\\n        string memory _from\\n    ) external returns (uint256 requestId) {\\n        bytes32 typeId = keccak256(abi.encodePacked(\\\"bool\\\"));\\n        ADCS.Request memory req = buildRequest(_jobId, typeId);\\n        req.add(\\\"from\\\", _from);\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedBool(requestId);\\n    }\\n\\n    function requestBytes32Data(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId,\\n        string memory _from\\n    ) external returns (uint256 requestId) {\\n        ADCS.Request memory req = buildRequest(_jobId, keccak256(abi.encodePacked(\\\"bytes32\\\")));\\n        req.add(\\\"from\\\", _from);\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedBytes32(requestId);\\n    }\\n\\n    function requestMemeData(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId\\n    ) external returns (uint256 requestId) {\\n        ADCS.Request memory req = buildRequest(\\n            _jobId,\\n            keccak256(abi.encodePacked(\\\"stringAndbool\\\"))\\n        );\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedBytes(requestId);\\n    }\\n\\n    function requestBytesData(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId,\\n        string memory _from\\n    ) external returns (uint256 requestId) {\\n        ADCS.Request memory req = buildRequest(_jobId, keccak256(abi.encodePacked(\\\"bytes\\\")));\\n        req.add(\\\"from\\\", _from);\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedBytes(requestId);\\n    }\\n\\n    function fulfillDataRequest(uint256, uint256 response) internal virtual override {\\n        lastUint256 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256, bool response) internal virtual override {\\n        lastBool = response;\\n    }\\n\\n    function fulfillDataRequest(uint256, bytes32 response) internal virtual override {\\n        lastBytes32 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256, bytes memory response) internal virtual override {\\n        lastBytes = response;\\n    }\\n\\n    function fulfillDataRequest(uint256, StringAndBool memory response) internal virtual override {\\n        lastestMemeCoin = response;\\n    }\\n}\\n\",\"keccak256\":\"0xbd7a1567872f56c5b5b8ba9b15a790f69917447fe5f6a858c79248e0700a7a3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002e2638038062002e268339818101604052810190620000379190620002a5565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505063ba9ecc9760e01b600080604051602001620000889062000332565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555063f8795e1060e01b600080604051602001620000e39062000399565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055506313ab866360e01b6000806040516020016200013e9062000400565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055506364d98f3660e01b600080604051602001620001999062000467565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555063de89dd5360e01b600080604051602001620001f490620004ce565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055505050620004e5565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026d8262000240565b9050919050565b6200027f8162000260565b81146200028b57600080fd5b50565b6000815190506200029f8162000274565b92915050565b600060208284031215620002be57620002bd6200023b565b5b6000620002ce848285016200028e565b91505092915050565b600081905092915050565b7f75696e7432353600000000000000000000000000000000000000000000000000600082015250565b60006200031a600783620002d7565b91506200032782620002e2565b600782019050919050565b60006200033f826200030b565b9150819050919050565b7f626f6f6c00000000000000000000000000000000000000000000000000000000600082015250565b600062000381600483620002d7565b91506200038e8262000349565b600482019050919050565b6000620003a68262000372565b9150819050919050565b7f6279746573333200000000000000000000000000000000000000000000000000600082015250565b6000620003e8600783620002d7565b9150620003f582620003b0565b600782019050919050565b60006200040d82620003d9565b9150819050919050565b7f6279746573000000000000000000000000000000000000000000000000000000600082015250565b60006200044f600583620002d7565b91506200045c8262000417565b600582019050919050565b6000620004748262000440565b9150819050919050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b6000620004b6600d83620002d7565b9150620004c3826200047e565b600d82019050919050565b6000620004db82620004a7565b9150819050919050565b6080516128d86200054e600039600081816103ba0152818161049201528181610602015281816106db015281816108260152818161095501528181610aa701528181610b9701528181610c3d01528181610d1401528181610dea0152610ea001526128d86000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80634ef910821161009757806390d95efc1161006657806390d95efc146102b0578063e3ca105d146102cc578063f40b4def146102fc578063feac766d1461031857610100565b80634ef9108214610228578063513bd64d146102585780636dfe4e4c1461027657806377f262ea1461029457610100565b80632c33875a116100d35780632c33875a1461019d5780633b2bcbf1146101bc57806346742eff146101da5780634ef0fff3146101f857610100565b8063037cd9cc146101055780630e2c871f14610135578063148b424e1461015157806319e2cd2f14610181575b600080fd5b61011f600480360381019061011a9190611741565b610336565b60405161012c91906117c9565b60405180910390f35b61014f600480360381019061014a91906118be565b61048e565b005b61016b6004803603810190610166919061191a565b610534565b60405161017891906117c9565b60405180910390f35b61019b60048036038101906101969190611a5a565b6106d7565b005b6101a561077d565b6040516101b3929190611b44565b60405180910390f35b6101c4610824565b6040516101d19190611bf3565b60405180910390f35b6101e2610848565b6040516101ef9190611c63565b60405180910390f35b610212600480360381019061020d9190611741565b6108d6565b60405161021f91906117c9565b60405180910390f35b610242600480360381019061023d9190611741565b610a28565b60405161024f91906117c9565b60405180910390f35b610260610b7a565b60405161026d9190611c94565b60405180910390f35b61027e610b80565b60405161028b9190611caf565b60405180910390f35b6102ae60048036038101906102a99190611cca565b610b93565b005b6102ca60048036038101906102c59190611d0a565b610c39565b005b6102e660048036038101906102e19190611d4a565b610cdf565b6040516102f391906117c9565b60405180910390f35b61031660048036038101906103119190611d8a565b610de6565b005b610320610e8c565b60405161032d91906117c9565b60405180910390f35b60008060405160200161034890611e21565b604051602081830303815290604052805190602001209050600061036c8583610e92565b90506103b86040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508583610ef89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f87836040518363ffffffff1660e01b8152600401610413929190611fbc565b6020604051808303816000875af1158015610432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104569190612001565b9250827fbe404c45b6b74531e0c631fa8236b0b2abbf5f24b37ee4f83b77e99b1e13aeb360405160405180910390a250509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105255733816040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161051c92919061203d565b60405180910390fd5b61052f8383610f2b565b505050565b600080604051602001610546906120b2565b604051602081830303815290604052805190602001209050600061056a8683610e92565b90506105b66040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508683610ef89092919063ffffffff16565b6106006040518060400160405280600281526020017f746f0000000000000000000000000000000000000000000000000000000000008152508583610ef89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f88836040518363ffffffff1660e01b815260040161065b929190611fbc565b6020604051808303816000875af115801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190612001565b9250827f2f9bce8ee79bb2471696219a14b13ee8fc00b505941b718e981d7dcc58c8a61060405160405180910390a25050949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076e5733816040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161076592919061203d565b60405180910390fd5b6107788383610f6b565b505050565b600580600001805461078e906120f6565b80601f01602080910402602001604051908101604052809291908181526020018280546107ba906120f6565b80156108075780601f106107dc57610100808354040283529160200191610807565b820191906000526020600020905b8154815290600101906020018083116107ea57829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054610855906120f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610881906120f6565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b505050505081565b600080610907846040516020016108ec90612173565b60405160208183030381529060405280519060200120610e92565b90506109536040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508483610ef89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f86836040518363ffffffff1660e01b81526004016109ae929190611fbc565b6020604051808303816000875af11580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f19190612001565b9150817f06a2b4387d37a456e7f9fcaf47b429a6079f5227f0788867c8920370872284d860405160405180910390a2509392505050565b600080610a5984604051602001610a3e906121d4565b60405160208183030381529060405280519060200120610e92565b9050610aa56040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508483610ef89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f86836040518363ffffffff1660e01b8152600401610b00929190611fbc565b6020604051808303816000875af1158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190612001565b9150817f867c522a119b99440246a0577cfbd60ded830a28eb054fe6608c75b445f329e160405160405180910390a2509392505050565b60035481565b600260009054906101000a900460ff1681565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2a5733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610c2192919061203d565b60405180910390fd5b610c348383610f7f565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cd05733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610cc792919061203d565b60405180910390fd5b610cda8383610f8a565b505050565b600080610d1083604051602001610cf590612235565b60405160208183030381529060405280519060200120610e92565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f85836040518363ffffffff1660e01b8152600401610d6d929190611fbc565b6020604051808303816000875af1158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190612001565b9150817f06a2b4387d37a456e7f9fcaf47b429a6079f5227f0788867c8920370872284d860405160405180910390a25092915050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e7d5733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610e7492919061203d565b60405180910390fd5b610e878383610fa8565b505050565b60015481565b610e9a6114ee565b610ef0837f000000000000000000000000000000000000000000000000000000000000000060008086815260200190815260200160002060009054906101000a900460e01b84610fb3909392919063ffffffff16565b905092915050565b610f0f82846080015161106390919063ffffffff16565b610f2681846080015161106390919063ffffffff16565b505050565b8060056000820151816000019081610f4391906123ec565b5060208201518160010160006101000a81548160ff0219169083151502179055509050505050565b8060049081610f7a9190612519565b505050565b806001819055505050565b80600260006101000a81548160ff0219169083151502179055505050565b806003819055505050565b610fbb6114ee565b610fcb8560800151610100611088565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b61107082600383516110f2565b611083818361127790919063ffffffff16565b505050565b61109061155b565b600060208361109f919061261a565b146110cb576020826110b1919061261a565b60206110bd919061267a565b826110c891906126ae565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611611129576111238160058460ff16901b60ff16178461129990919063ffffffff16565b50611272565b60ff8167ffffffffffffffff161161117f57611158601860058460ff16901b178461129990919063ffffffff16565b506111798167ffffffffffffffff166001856112b99092919063ffffffff16565b50611271565b61ffff8167ffffffffffffffff16116111d6576111af601960058460ff16901b178461129990919063ffffffff16565b506111d08167ffffffffffffffff166002856112b99092919063ffffffff16565b50611270565b63ffffffff8167ffffffffffffffff161161122f57611208601a60058460ff16901b178461129990919063ffffffff16565b506112298167ffffffffffffffff166004856112b99092919063ffffffff16565b5061126f565b61124c601b60058460ff16901b178461129990919063ffffffff16565b5061126d8167ffffffffffffffff166008856112b99092919063ffffffff16565b505b5b5b5b505050565b61127f61155b565b611291838460000151518485516112db565b905092915050565b6112a161155b565b6112b183846000015151846113ca565b905092915050565b6112c161155b565b6112d2848560000151518585611420565b90509392505050565b6112e361155b565b82518211156112f157600080fd5b8460200151828561130291906126ae565b1115611337576113368560026113278860200151888761132291906126ae565b6114ae565b61133191906126e2565b6114ca565b5b6000808651805187602083010193508088870111156113565787860182525b60208701925050505b6020841061139d578051825260208261137891906126ae565b915060208161138791906126ae565b9050602084611396919061267a565b935061135f565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6113d261155b565b836020015183106113f8576113f784600286602001516113f291906126e2565b6114ca565b5b83518051602085830101848153818603611413576001820183525b5050508390509392505050565b61142861155b565b8460200151848361143991906126ae565b111561146157611460856002868561145191906126ae565b61145b91906126e2565b6114ca565b5b60006001836101006114739190612857565b61147d919061267a565b905085518386820101858319825116178152815185880111156114a05784870182525b505085915050949350505050565b6000818311156114c0578290506114c4565b8190505b92915050565b6000826000015190506114dd8383611088565b506114e88382611277565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161155561155b565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b6115a281611589565b81146115ad57600080fd5b50565b6000813590506115bf81611599565b92915050565b6000819050919050565b6115d8816115c5565b81146115e357600080fd5b50565b6000813590506115f5816115cf565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61164e82611605565b810181811067ffffffffffffffff8211171561166d5761166c611616565b5b80604052505050565b6000611680611575565b905061168c8282611645565b919050565b600067ffffffffffffffff8211156116ac576116ab611616565b5b6116b582611605565b9050602081019050919050565b82818337600083830152505050565b60006116e46116df84611691565b611676565b905082815260208101848484011115611700576116ff611600565b5b61170b8482856116c2565b509392505050565b600082601f830112611728576117276115fb565b5b81356117388482602086016116d1565b91505092915050565b60008060006060848603121561175a5761175961157f565b5b6000611768868287016115b0565b9350506020611779868287016115e6565b925050604084013567ffffffffffffffff81111561179a57611799611584565b5b6117a686828701611713565b9150509250925092565b6000819050919050565b6117c3816117b0565b82525050565b60006020820190506117de60008301846117ba565b92915050565b6117ed816117b0565b81146117f857600080fd5b50565b60008135905061180a816117e4565b92915050565b600080fd5b600080fd5b60008115159050919050565b61182f8161181a565b811461183a57600080fd5b50565b60008135905061184c81611826565b92915050565b60006040828403121561186857611867611810565b5b6118726040611676565b9050600082013567ffffffffffffffff81111561189257611891611815565b5b61189e84828501611713565b60008301525060206118b28482850161183d565b60208301525092915050565b600080604083850312156118d5576118d461157f565b5b60006118e3858286016117fb565b925050602083013567ffffffffffffffff81111561190457611903611584565b5b61191085828601611852565b9150509250929050565b600080600080608085870312156119345761193361157f565b5b6000611942878288016115b0565b9450506020611953878288016115e6565b935050604085013567ffffffffffffffff81111561197457611973611584565b5b61198087828801611713565b925050606085013567ffffffffffffffff8111156119a1576119a0611584565b5b6119ad87828801611713565b91505092959194509250565b600067ffffffffffffffff8211156119d4576119d3611616565b5b6119dd82611605565b9050602081019050919050565b60006119fd6119f8846119b9565b611676565b905082815260208101848484011115611a1957611a18611600565b5b611a248482856116c2565b509392505050565b600082601f830112611a4157611a406115fb565b5b8135611a518482602086016119ea565b91505092915050565b60008060408385031215611a7157611a7061157f565b5b6000611a7f858286016117fb565b925050602083013567ffffffffffffffff811115611aa057611a9f611584565b5b611aac85828601611a2c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611af0578082015181840152602081019050611ad5565b60008484015250505050565b6000611b0782611ab6565b611b118185611ac1565b9350611b21818560208601611ad2565b611b2a81611605565b840191505092915050565b611b3e8161181a565b82525050565b60006040820190508181036000830152611b5e8185611afc565b9050611b6d6020830184611b35565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611bb9611bb4611baf84611b74565b611b94565b611b74565b9050919050565b6000611bcb82611b9e565b9050919050565b6000611bdd82611bc0565b9050919050565b611bed81611bd2565b82525050565b6000602082019050611c086000830184611be4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611c3582611c0e565b611c3f8185611c19565b9350611c4f818560208601611ad2565b611c5881611605565b840191505092915050565b60006020820190508181036000830152611c7d8184611c2a565b905092915050565b611c8e816115c5565b82525050565b6000602082019050611ca96000830184611c85565b92915050565b6000602082019050611cc46000830184611b35565b92915050565b60008060408385031215611ce157611ce061157f565b5b6000611cef858286016117fb565b9250506020611d00858286016117fb565b9150509250929050565b60008060408385031215611d2157611d2061157f565b5b6000611d2f858286016117fb565b9250506020611d408582860161183d565b9150509250929050565b60008060408385031215611d6157611d6061157f565b5b6000611d6f858286016115b0565b9250506020611d80858286016115e6565b9150509250929050565b60008060408385031215611da157611da061157f565b5b6000611daf858286016117fb565b9250506020611dc0858286016115e6565b9150509250929050565b600081905092915050565b7f626f6f6c00000000000000000000000000000000000000000000000000000000600082015250565b6000611e0b600483611dca565b9150611e1682611dd5565b600482019050919050565b6000611e2c82611dfe565b9150819050919050565b611e3f81611589565b82525050565b611e4e816115c5565b82525050565b6000611e5f82611b74565b9050919050565b611e6f81611e54565b82525050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611eaa81611e75565b82525050565b611eb9816117b0565b82525050565b600082825260208201905092915050565b6000611edb82611c0e565b611ee58185611ebf565b9350611ef5818560208601611ad2565b611efe81611605565b840191505092915050565b60006040830160008301518482036000860152611f268282611ed0565b9150506020830151611f3b6020860182611eb0565b508091505092915050565b600060a083016000830151611f5e6000860182611e45565b506020830151611f716020860182611e66565b506040830151611f846040860182611ea1565b506060830151611f976060860182611eb0565b5060808301518482036080860152611faf8282611f09565b9150508091505092915050565b6000604082019050611fd16000830185611e36565b8181036020830152611fe38184611f46565b90509392505050565b600081519050611ffb816117e4565b92915050565b6000602082840312156120175761201661157f565b5b600061202584828501611fec565b91505092915050565b61203781611e54565b82525050565b6000604082019050612052600083018561202e565b61205f602083018461202e565b9392505050565b7f75696e7432353600000000000000000000000000000000000000000000000000600082015250565b600061209c600783611dca565b91506120a782612066565b600782019050919050565b60006120bd8261208f565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061210e57607f821691505b602082108103612121576121206120c7565b5b50919050565b7f6279746573000000000000000000000000000000000000000000000000000000600082015250565b600061215d600583611dca565b915061216882612127565b600582019050919050565b600061217e82612150565b9150819050919050565b7f6279746573333200000000000000000000000000000000000000000000000000600082015250565b60006121be600783611dca565b91506121c982612188565b600782019050919050565b60006121df826121b1565b9150819050919050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b600061221f600d83611dca565b915061222a826121e9565b600d82019050919050565b600061224082612212565b9150819050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026122ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261226f565b6122b6868361226f565b95508019841693508086168417925050509392505050565b60006122e96122e46122df846117b0565b611b94565b6117b0565b9050919050565b6000819050919050565b612303836122ce565b61231761230f826122f0565b84845461227c565b825550505050565b600090565b61232c61231f565b6123378184846122fa565b505050565b5b8181101561235b57612350600082612324565b60018101905061233d565b5050565b601f8211156123a0576123718161224a565b61237a8461225f565b81016020851015612389578190505b61239d6123958561225f565b83018261233c565b50505b505050565b600082821c905092915050565b60006123c3600019846008026123a5565b1980831691505092915050565b60006123dc83836123b2565b9150826002028217905092915050565b6123f582611ab6565b67ffffffffffffffff81111561240e5761240d611616565b5b61241882546120f6565b61242382828561235f565b600060209050601f8311600181146124565760008415612444578287015190505b61244e85826123d0565b8655506124b6565b601f1984166124648661224a565b60005b8281101561248c57848901518255600182019150602085019450602081019050612467565b868310156124a957848901516124a5601f8916826123b2565b8355505b6001600288020188555050505b505050505050565b60008190508160005260206000209050919050565b601f821115612514576124e5816124be565b6124ee8461225f565b810160208510156124fd578190505b6125116125098561225f565b83018261233c565b50505b505050565b61252282611c0e565b67ffffffffffffffff81111561253b5761253a611616565b5b61254582546120f6565b6125508282856124d3565b600060209050601f8311600181146125835760008415612571578287015190505b61257b85826123d0565b8655506125e3565b601f198416612591866124be565b60005b828110156125b957848901518255600182019150602085019450602081019050612594565b868310156125d657848901516125d2601f8916826123b2565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612625826117b0565b9150612630836117b0565b9250826126405761263f6125eb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612685826117b0565b9150612690836117b0565b92508282039050818111156126a8576126a761264b565b5b92915050565b60006126b9826117b0565b91506126c4836117b0565b92508282019050808211156126dc576126db61264b565b5b92915050565b60006126ed826117b0565b91506126f8836117b0565b9250828202612706816117b0565b9150828204841483151761271d5761271c61264b565b5b5092915050565b60008160011c9050919050565b6000808291508390505b600185111561277b578086048111156127575761275661264b565b5b60018516156127665780820291505b808102905061277485612724565b945061273b565b94509492505050565b6000826127945760019050612850565b816127a25760009050612850565b81600181146127b857600281146127c2576127f1565b6001915050612850565b60ff8411156127d4576127d361264b565b5b8360020a9150848211156127eb576127ea61264b565b5b50612850565b5060208310610133831016604e8410600b84101617156128265782820a9050838111156128215761282061264b565b5b612850565b6128338484846001612731565b9250905081840481111561284a5761284961264b565b5b81810290505b9392505050565b6000612862826117b0565b915061286d836117b0565b925061289a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612784565b90509291505056fea26469706673582212203fce4a2c1c41c8488f93fd953dc6ef9bce4c2f535c829210c5818725a1d2a6b664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80634ef910821161009757806390d95efc1161006657806390d95efc146102b0578063e3ca105d146102cc578063f40b4def146102fc578063feac766d1461031857610100565b80634ef9108214610228578063513bd64d146102585780636dfe4e4c1461027657806377f262ea1461029457610100565b80632c33875a116100d35780632c33875a1461019d5780633b2bcbf1146101bc57806346742eff146101da5780634ef0fff3146101f857610100565b8063037cd9cc146101055780630e2c871f14610135578063148b424e1461015157806319e2cd2f14610181575b600080fd5b61011f600480360381019061011a9190611741565b610336565b60405161012c91906117c9565b60405180910390f35b61014f600480360381019061014a91906118be565b61048e565b005b61016b6004803603810190610166919061191a565b610534565b60405161017891906117c9565b60405180910390f35b61019b60048036038101906101969190611a5a565b6106d7565b005b6101a561077d565b6040516101b3929190611b44565b60405180910390f35b6101c4610824565b6040516101d19190611bf3565b60405180910390f35b6101e2610848565b6040516101ef9190611c63565b60405180910390f35b610212600480360381019061020d9190611741565b6108d6565b60405161021f91906117c9565b60405180910390f35b610242600480360381019061023d9190611741565b610a28565b60405161024f91906117c9565b60405180910390f35b610260610b7a565b60405161026d9190611c94565b60405180910390f35b61027e610b80565b60405161028b9190611caf565b60405180910390f35b6102ae60048036038101906102a99190611cca565b610b93565b005b6102ca60048036038101906102c59190611d0a565b610c39565b005b6102e660048036038101906102e19190611d4a565b610cdf565b6040516102f391906117c9565b60405180910390f35b61031660048036038101906103119190611d8a565b610de6565b005b610320610e8c565b60405161032d91906117c9565b60405180910390f35b60008060405160200161034890611e21565b604051602081830303815290604052805190602001209050600061036c8583610e92565b90506103b86040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508583610ef89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f87836040518363ffffffff1660e01b8152600401610413929190611fbc565b6020604051808303816000875af1158015610432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104569190612001565b9250827fbe404c45b6b74531e0c631fa8236b0b2abbf5f24b37ee4f83b77e99b1e13aeb360405160405180910390a250509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105255733816040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161051c92919061203d565b60405180910390fd5b61052f8383610f2b565b505050565b600080604051602001610546906120b2565b604051602081830303815290604052805190602001209050600061056a8683610e92565b90506105b66040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508683610ef89092919063ffffffff16565b6106006040518060400160405280600281526020017f746f0000000000000000000000000000000000000000000000000000000000008152508583610ef89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f88836040518363ffffffff1660e01b815260040161065b929190611fbc565b6020604051808303816000875af115801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190612001565b9250827f2f9bce8ee79bb2471696219a14b13ee8fc00b505941b718e981d7dcc58c8a61060405160405180910390a25050949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076e5733816040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161076592919061203d565b60405180910390fd5b6107788383610f6b565b505050565b600580600001805461078e906120f6565b80601f01602080910402602001604051908101604052809291908181526020018280546107ba906120f6565b80156108075780601f106107dc57610100808354040283529160200191610807565b820191906000526020600020905b8154815290600101906020018083116107ea57829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054610855906120f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610881906120f6565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b505050505081565b600080610907846040516020016108ec90612173565b60405160208183030381529060405280519060200120610e92565b90506109536040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508483610ef89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f86836040518363ffffffff1660e01b81526004016109ae929190611fbc565b6020604051808303816000875af11580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f19190612001565b9150817f06a2b4387d37a456e7f9fcaf47b429a6079f5227f0788867c8920370872284d860405160405180910390a2509392505050565b600080610a5984604051602001610a3e906121d4565b60405160208183030381529060405280519060200120610e92565b9050610aa56040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508483610ef89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f86836040518363ffffffff1660e01b8152600401610b00929190611fbc565b6020604051808303816000875af1158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190612001565b9150817f867c522a119b99440246a0577cfbd60ded830a28eb054fe6608c75b445f329e160405160405180910390a2509392505050565b60035481565b600260009054906101000a900460ff1681565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2a5733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610c2192919061203d565b60405180910390fd5b610c348383610f7f565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cd05733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610cc792919061203d565b60405180910390fd5b610cda8383610f8a565b505050565b600080610d1083604051602001610cf590612235565b60405160208183030381529060405280519060200120610e92565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f85836040518363ffffffff1660e01b8152600401610d6d929190611fbc565b6020604051808303816000875af1158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190612001565b9150817f06a2b4387d37a456e7f9fcaf47b429a6079f5227f0788867c8920370872284d860405160405180910390a25092915050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e7d5733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610e7492919061203d565b60405180910390fd5b610e878383610fa8565b505050565b60015481565b610e9a6114ee565b610ef0837f000000000000000000000000000000000000000000000000000000000000000060008086815260200190815260200160002060009054906101000a900460e01b84610fb3909392919063ffffffff16565b905092915050565b610f0f82846080015161106390919063ffffffff16565b610f2681846080015161106390919063ffffffff16565b505050565b8060056000820151816000019081610f4391906123ec565b5060208201518160010160006101000a81548160ff0219169083151502179055509050505050565b8060049081610f7a9190612519565b505050565b806001819055505050565b80600260006101000a81548160ff0219169083151502179055505050565b806003819055505050565b610fbb6114ee565b610fcb8560800151610100611088565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b61107082600383516110f2565b611083818361127790919063ffffffff16565b505050565b61109061155b565b600060208361109f919061261a565b146110cb576020826110b1919061261a565b60206110bd919061267a565b826110c891906126ae565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611611129576111238160058460ff16901b60ff16178461129990919063ffffffff16565b50611272565b60ff8167ffffffffffffffff161161117f57611158601860058460ff16901b178461129990919063ffffffff16565b506111798167ffffffffffffffff166001856112b99092919063ffffffff16565b50611271565b61ffff8167ffffffffffffffff16116111d6576111af601960058460ff16901b178461129990919063ffffffff16565b506111d08167ffffffffffffffff166002856112b99092919063ffffffff16565b50611270565b63ffffffff8167ffffffffffffffff161161122f57611208601a60058460ff16901b178461129990919063ffffffff16565b506112298167ffffffffffffffff166004856112b99092919063ffffffff16565b5061126f565b61124c601b60058460ff16901b178461129990919063ffffffff16565b5061126d8167ffffffffffffffff166008856112b99092919063ffffffff16565b505b5b5b5b505050565b61127f61155b565b611291838460000151518485516112db565b905092915050565b6112a161155b565b6112b183846000015151846113ca565b905092915050565b6112c161155b565b6112d2848560000151518585611420565b90509392505050565b6112e361155b565b82518211156112f157600080fd5b8460200151828561130291906126ae565b1115611337576113368560026113278860200151888761132291906126ae565b6114ae565b61133191906126e2565b6114ca565b5b6000808651805187602083010193508088870111156113565787860182525b60208701925050505b6020841061139d578051825260208261137891906126ae565b915060208161138791906126ae565b9050602084611396919061267a565b935061135f565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6113d261155b565b836020015183106113f8576113f784600286602001516113f291906126e2565b6114ca565b5b83518051602085830101848153818603611413576001820183525b5050508390509392505050565b61142861155b565b8460200151848361143991906126ae565b111561146157611460856002868561145191906126ae565b61145b91906126e2565b6114ca565b5b60006001836101006114739190612857565b61147d919061267a565b905085518386820101858319825116178152815185880111156114a05784870182525b505085915050949350505050565b6000818311156114c0578290506114c4565b8190505b92915050565b6000826000015190506114dd8383611088565b506114e88382611277565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161155561155b565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b6115a281611589565b81146115ad57600080fd5b50565b6000813590506115bf81611599565b92915050565b6000819050919050565b6115d8816115c5565b81146115e357600080fd5b50565b6000813590506115f5816115cf565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61164e82611605565b810181811067ffffffffffffffff8211171561166d5761166c611616565b5b80604052505050565b6000611680611575565b905061168c8282611645565b919050565b600067ffffffffffffffff8211156116ac576116ab611616565b5b6116b582611605565b9050602081019050919050565b82818337600083830152505050565b60006116e46116df84611691565b611676565b905082815260208101848484011115611700576116ff611600565b5b61170b8482856116c2565b509392505050565b600082601f830112611728576117276115fb565b5b81356117388482602086016116d1565b91505092915050565b60008060006060848603121561175a5761175961157f565b5b6000611768868287016115b0565b9350506020611779868287016115e6565b925050604084013567ffffffffffffffff81111561179a57611799611584565b5b6117a686828701611713565b9150509250925092565b6000819050919050565b6117c3816117b0565b82525050565b60006020820190506117de60008301846117ba565b92915050565b6117ed816117b0565b81146117f857600080fd5b50565b60008135905061180a816117e4565b92915050565b600080fd5b600080fd5b60008115159050919050565b61182f8161181a565b811461183a57600080fd5b50565b60008135905061184c81611826565b92915050565b60006040828403121561186857611867611810565b5b6118726040611676565b9050600082013567ffffffffffffffff81111561189257611891611815565b5b61189e84828501611713565b60008301525060206118b28482850161183d565b60208301525092915050565b600080604083850312156118d5576118d461157f565b5b60006118e3858286016117fb565b925050602083013567ffffffffffffffff81111561190457611903611584565b5b61191085828601611852565b9150509250929050565b600080600080608085870312156119345761193361157f565b5b6000611942878288016115b0565b9450506020611953878288016115e6565b935050604085013567ffffffffffffffff81111561197457611973611584565b5b61198087828801611713565b925050606085013567ffffffffffffffff8111156119a1576119a0611584565b5b6119ad87828801611713565b91505092959194509250565b600067ffffffffffffffff8211156119d4576119d3611616565b5b6119dd82611605565b9050602081019050919050565b60006119fd6119f8846119b9565b611676565b905082815260208101848484011115611a1957611a18611600565b5b611a248482856116c2565b509392505050565b600082601f830112611a4157611a406115fb565b5b8135611a518482602086016119ea565b91505092915050565b60008060408385031215611a7157611a7061157f565b5b6000611a7f858286016117fb565b925050602083013567ffffffffffffffff811115611aa057611a9f611584565b5b611aac85828601611a2c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611af0578082015181840152602081019050611ad5565b60008484015250505050565b6000611b0782611ab6565b611b118185611ac1565b9350611b21818560208601611ad2565b611b2a81611605565b840191505092915050565b611b3e8161181a565b82525050565b60006040820190508181036000830152611b5e8185611afc565b9050611b6d6020830184611b35565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611bb9611bb4611baf84611b74565b611b94565b611b74565b9050919050565b6000611bcb82611b9e565b9050919050565b6000611bdd82611bc0565b9050919050565b611bed81611bd2565b82525050565b6000602082019050611c086000830184611be4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611c3582611c0e565b611c3f8185611c19565b9350611c4f818560208601611ad2565b611c5881611605565b840191505092915050565b60006020820190508181036000830152611c7d8184611c2a565b905092915050565b611c8e816115c5565b82525050565b6000602082019050611ca96000830184611c85565b92915050565b6000602082019050611cc46000830184611b35565b92915050565b60008060408385031215611ce157611ce061157f565b5b6000611cef858286016117fb565b9250506020611d00858286016117fb565b9150509250929050565b60008060408385031215611d2157611d2061157f565b5b6000611d2f858286016117fb565b9250506020611d408582860161183d565b9150509250929050565b60008060408385031215611d6157611d6061157f565b5b6000611d6f858286016115b0565b9250506020611d80858286016115e6565b9150509250929050565b60008060408385031215611da157611da061157f565b5b6000611daf858286016117fb565b9250506020611dc0858286016115e6565b9150509250929050565b600081905092915050565b7f626f6f6c00000000000000000000000000000000000000000000000000000000600082015250565b6000611e0b600483611dca565b9150611e1682611dd5565b600482019050919050565b6000611e2c82611dfe565b9150819050919050565b611e3f81611589565b82525050565b611e4e816115c5565b82525050565b6000611e5f82611b74565b9050919050565b611e6f81611e54565b82525050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611eaa81611e75565b82525050565b611eb9816117b0565b82525050565b600082825260208201905092915050565b6000611edb82611c0e565b611ee58185611ebf565b9350611ef5818560208601611ad2565b611efe81611605565b840191505092915050565b60006040830160008301518482036000860152611f268282611ed0565b9150506020830151611f3b6020860182611eb0565b508091505092915050565b600060a083016000830151611f5e6000860182611e45565b506020830151611f716020860182611e66565b506040830151611f846040860182611ea1565b506060830151611f976060860182611eb0565b5060808301518482036080860152611faf8282611f09565b9150508091505092915050565b6000604082019050611fd16000830185611e36565b8181036020830152611fe38184611f46565b90509392505050565b600081519050611ffb816117e4565b92915050565b6000602082840312156120175761201661157f565b5b600061202584828501611fec565b91505092915050565b61203781611e54565b82525050565b6000604082019050612052600083018561202e565b61205f602083018461202e565b9392505050565b7f75696e7432353600000000000000000000000000000000000000000000000000600082015250565b600061209c600783611dca565b91506120a782612066565b600782019050919050565b60006120bd8261208f565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061210e57607f821691505b602082108103612121576121206120c7565b5b50919050565b7f6279746573000000000000000000000000000000000000000000000000000000600082015250565b600061215d600583611dca565b915061216882612127565b600582019050919050565b600061217e82612150565b9150819050919050565b7f6279746573333200000000000000000000000000000000000000000000000000600082015250565b60006121be600783611dca565b91506121c982612188565b600782019050919050565b60006121df826121b1565b9150819050919050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b600061221f600d83611dca565b915061222a826121e9565b600d82019050919050565b600061224082612212565b9150819050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026122ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261226f565b6122b6868361226f565b95508019841693508086168417925050509392505050565b60006122e96122e46122df846117b0565b611b94565b6117b0565b9050919050565b6000819050919050565b612303836122ce565b61231761230f826122f0565b84845461227c565b825550505050565b600090565b61232c61231f565b6123378184846122fa565b505050565b5b8181101561235b57612350600082612324565b60018101905061233d565b5050565b601f8211156123a0576123718161224a565b61237a8461225f565b81016020851015612389578190505b61239d6123958561225f565b83018261233c565b50505b505050565b600082821c905092915050565b60006123c3600019846008026123a5565b1980831691505092915050565b60006123dc83836123b2565b9150826002028217905092915050565b6123f582611ab6565b67ffffffffffffffff81111561240e5761240d611616565b5b61241882546120f6565b61242382828561235f565b600060209050601f8311600181146124565760008415612444578287015190505b61244e85826123d0565b8655506124b6565b601f1984166124648661224a565b60005b8281101561248c57848901518255600182019150602085019450602081019050612467565b868310156124a957848901516124a5601f8916826123b2565b8355505b6001600288020188555050505b505050505050565b60008190508160005260206000209050919050565b601f821115612514576124e5816124be565b6124ee8461225f565b810160208510156124fd578190505b6125116125098561225f565b83018261233c565b50505b505050565b61252282611c0e565b67ffffffffffffffff81111561253b5761253a611616565b5b61254582546120f6565b6125508282856124d3565b600060209050601f8311600181146125835760008415612571578287015190505b61257b85826123d0565b8655506125e3565b601f198416612591866124be565b60005b828110156125b957848901518255600182019150602085019450602081019050612594565b868310156125d657848901516125d2601f8916826123b2565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612625826117b0565b9150612630836117b0565b9250826126405761263f6125eb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612685826117b0565b9150612690836117b0565b92508282039050818111156126a8576126a761264b565b5b92915050565b60006126b9826117b0565b91506126c4836117b0565b92508282019050808211156126dc576126db61264b565b5b92915050565b60006126ed826117b0565b91506126f8836117b0565b9250828202612706816117b0565b9150828204841483151761271d5761271c61264b565b5b5092915050565b60008160011c9050919050565b6000808291508390505b600185111561277b578086048111156127575761275661264b565b5b60018516156127665780820291505b808102905061277485612724565b945061273b565b94509492505050565b6000826127945760019050612850565b816127a25760009050612850565b81600181146127b857600281146127c2576127f1565b6001915050612850565b60ff8411156127d4576127d361264b565b5b8360020a9150848211156127eb576127ea61264b565b5b50612850565b5060208310610133831016604e8410600b84101617156128265782820a9050838111156128215761282061264b565b5b612850565b6128338484846001612731565b9250905081840481111561284a5761284961264b565b5b81810290505b9392505050565b6000612862826117b0565b915061286d836117b0565b925061289a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612784565b90509291505056fea26469706673582212203fce4a2c1c41c8488f93fd953dc6ef9bce4c2f535c829210c5818725a1d2a6b664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "sTypeIdToFunctionSelector",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes4)"
      },
      {
        "astId": 1658,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastUint256",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1660,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastBool",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1662,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastBytes32",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 1664,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastBytes",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1667,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastestMemeCoin",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(StringAndBool)11_storage"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(StringAndBool)11_storage": {
        "encoding": "inplace",
        "label": "struct ADCSConsumerBase.StringAndBool",
        "members": [
          {
            "astId": 8,
            "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10,
            "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
            "label": "response",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}