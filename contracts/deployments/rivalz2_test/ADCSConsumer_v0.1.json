{
  "address": "0xcb370befD22DC842eF067D36600876072b6f33Ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coordinator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedBool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedBytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedBytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequestedUint256",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract IADCSCoordinator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "response",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        }
      ],
      "name": "requestBoolData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        }
      ],
      "name": "requestBytes32Data",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        }
      ],
      "name": "requestBytesData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_to",
          "type": "string"
        }
      ],
      "name": "requestUint256Data",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9f17d37cf9c17c4f6217ce3d13205e60b6c40d278d9aee2b62d488db5555272",
  "receipt": {
    "to": null,
    "from": "0x8b736035BbDA71825e0219f5FE4DfB22C35FbDDC",
    "contractAddress": "0xcb370befD22DC842eF067D36600876072b6f33Ea",
    "transactionIndex": 1,
    "gasUsed": "2132446",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x47204f2d125291973290ff66f254a396e6075d6414d40095ac41f63b9a9bbc0e",
    "transactionHash": "0xa9f17d37cf9c17c4f6217ce3d13205e60b6c40d278d9aee2b62d488db5555272",
    "logs": [],
    "blockNumber": 11888130,
    "cumulativeGasUsed": "2132446",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf6443A416D3984257F85e76d2295E777fbE01DdC"
  ],
  "numDeployments": 3,
  "solcInputHash": "0275cb00852f6709e35d2f3e30ae6ccc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequestedUint256\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IADCSCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"response\",\"type\":\"uint256\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"}],\"name\":\"requestBoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"}],\"name\":\"requestBytes32Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"}],\"name\":\"requestBytesData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_to\",\"type\":\"string\"}],\"name\":\"requestUint256Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mock/MockADCSConsumer.sol\":\"MockADCSConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ADCSConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IADCSCoordinator.sol\\\";\\n\\nabstract contract ADCSConsumerBase {\\n    using ADCS for ADCS.Request;\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    mapping(bytes32 => bytes4) private sTypeIdToFunctionSelector;\\n    IADCSCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _requestResponseCoordinator address of ADCSCoordinator contract\\n     */\\n    constructor(address _requestResponseCoordinator) {\\n        COORDINATOR = IADCSCoordinator(_requestResponseCoordinator);\\n\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint256\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint256\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @param typeId the reponse type ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(\\n        bytes32 jobId,\\n        bytes32 typeId\\n    ) internal view returns (ADCS.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sTypeIdToFunctionSelector[typeId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x194f59d0458c67dbf465623f292680c58f5b5dfe2169c76df62d40acc9810724\",\"license\":\"MIT\"},\"src/ADCSConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ADCSConsumerBase.sol\\\";\\n\\nabstract contract ADCSConsumerFulfillUint256 is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBool is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBytes32 is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBytes is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x120734f802f3c7df53b053eae73a7f136fd6aa3945fce331bd830a939418c44e\",\"license\":\"MIT\"},\"src/interfaces/IADCSCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IADCSCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IADCSCoordinator is IADCSCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x675f3774f7561f7d2f74f9dac020bad81154f1bba3af7d4c22e57e595a9e7769\",\"license\":\"MIT\"},\"src/interfaces/IADCSCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/ADCS.sol\\\";\\n\\ninterface IADCSCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bytes32 jobId;\\n    }\\n\\n    function requestData(\\n        uint32 callbackGasLimit,\\n        ADCS.Request memory req\\n    ) external returns (uint256);\\n\\n    function fulfillDataRequestUint256(\\n        uint256 requestId,\\n        uint256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbd509b4d7d9f16ac88bb363f2ef2422a043bbbb594f07cad9f3ad58ea4a7ff54\",\"license\":\"MIT\"},\"src/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     */\\n    function setConfig(uint32 maxGasLimit, uint32 gasAfterPaymentCalculation) external;\\n\\n    function pendingRequestExists(address consumer, uint64 nonce) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n}\\n\",\"keccak256\":\"0x2cce5a34fc50282f7c1a8340ef18c50b8e9785f01d63f3ac9d02a985d7ae603a\",\"license\":\"MIT\"},\"src/libraries/ADCS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary ADCS {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (ADCS.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0x5c143d8c51913e10b156ad7f83a6b58b905b68c7b6aaa68982cd4ba60eb8d6c2\",\"license\":\"MIT\"},\"src/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"src/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/mock/MockADCSConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ADCSConsumerFulfill.sol\\\";\\n\\ncontract MockADCSConsumer is\\n    ADCSConsumerFulfillUint256,\\n    ADCSConsumerFulfillBool,\\n    ADCSConsumerFulfillBytes32,\\n    ADCSConsumerFulfillBytes\\n{\\n    using ADCS for ADCS.Request;\\n    uint256 public lastUint256;\\n    bool public lastBool;\\n    bytes32 public lastBytes32;\\n    bytes public lastBytes;\\n\\n    event DataRequestedUint256(uint256 indexed requestId);\\n    event DataRequestedBool(uint256 indexed requestId);\\n    event DataRequestedBytes32(uint256 indexed requestId);\\n    event DataRequestedBytes(uint256 indexed requestId);\\n\\n    constructor(address _coordinator) ADCSConsumerBase(_coordinator) {}\\n\\n    function requestUint256Data(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId,\\n        string memory _from,\\n        string memory _to\\n    ) external returns (uint256 requestId) {\\n        bytes32 typeId = keccak256(abi.encodePacked(\\\"uint256\\\"));\\n        ADCS.Request memory req = buildRequest(_jobId, typeId);\\n        req.add(\\\"from\\\", _from);\\n        req.add(\\\"to\\\", _to);\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedUint256(requestId);\\n    }\\n\\n    function requestBoolData(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId,\\n        string memory _from\\n    ) external returns (uint256 requestId) {\\n        bytes32 typeId = keccak256(abi.encodePacked(\\\"bool\\\"));\\n        ADCS.Request memory req = buildRequest(_jobId, typeId);\\n        req.add(\\\"from\\\", _from);\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedBool(requestId);\\n    }\\n\\n    function requestBytes32Data(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId,\\n        string memory _from\\n    ) external returns (uint256 requestId) {\\n        ADCS.Request memory req = buildRequest(_jobId, keccak256(abi.encodePacked(\\\"bytes32\\\")));\\n        req.add(\\\"from\\\", _from);\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedBytes32(requestId);\\n    }\\n\\n    function requestBytesData(\\n        uint32 _callbackGasLimit,\\n        bytes32 _jobId,\\n        string memory _from\\n    ) external returns (uint256 requestId) {\\n        ADCS.Request memory req = buildRequest(_jobId, keccak256(abi.encodePacked(\\\"bytes\\\")));\\n        req.add(\\\"from\\\", _from);\\n        requestId = COORDINATOR.requestData(_callbackGasLimit, req);\\n        emit DataRequestedBytes(requestId);\\n    }\\n\\n    function fulfillDataRequest(uint256, uint256 response) internal virtual override {\\n        lastUint256 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256, bool response) internal virtual override {\\n        lastBool = response;\\n    }\\n\\n    function fulfillDataRequest(uint256, bytes32 response) internal virtual override {\\n        lastBytes32 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256, bytes memory response) internal virtual override {\\n        lastBytes = response;\\n    }\\n}\\n\",\"keccak256\":\"0xcbbaecbe9da40be2411678a7849b55b944dcfb82f5cc0aaf330fbdcd43e79434\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620027013803806200270183398181016040528101906200003791906200024a565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505063ba9ecc9760e01b6000806040516020016200008890620002d7565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555063f8795e1060e01b600080604051602001620000e3906200033e565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055506313ab866360e01b6000806040516020016200013e90620003a5565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055506364d98f3660e01b60008060405160200162000199906200040c565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c0217905550505062000423565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021282620001e5565b9050919050565b620002248162000205565b81146200023057600080fd5b50565b600081519050620002448162000219565b92915050565b600060208284031215620002635762000262620001e0565b5b6000620002738482850162000233565b91505092915050565b600081905092915050565b7f75696e7432353600000000000000000000000000000000000000000000000000600082015250565b6000620002bf6007836200027c565b9150620002cc8262000287565b600782019050919050565b6000620002e482620002b0565b9150819050919050565b7f626f6f6c00000000000000000000000000000000000000000000000000000000600082015250565b6000620003266004836200027c565b91506200033382620002ee565b600482019050919050565b60006200034b8262000317565b9150819050919050565b7f6279746573333200000000000000000000000000000000000000000000000000600082015250565b60006200038d6007836200027c565b91506200039a8262000355565b600782019050919050565b6000620003b2826200037e565b9150819050919050565b7f6279746573000000000000000000000000000000000000000000000000000000600082015250565b6000620003f46005836200027c565b91506200040182620003bc565b600582019050919050565b60006200041982620003e5565b9150819050919050565b6080516122836200047e6000396000818161031e015281816104c0015281816105990152818161063d0152818161076c015281816108be015281816109ae01528181610a5401528181610afa0152610bb001526122836000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80634ef910821161008c57806377f262ea1161006657806377f262ea1461022857806390d95efc14610244578063f40b4def14610260578063feac766d1461027c576100cf565b80634ef91082146101bc578063513bd64d146101ec5780636dfe4e4c1461020a576100cf565b8063037cd9cc146100d4578063148b424e1461010457806319e2cd2f146101345780633b2bcbf11461015057806346742eff1461016e5780634ef0fff31461018c575b600080fd5b6100ee60048036038101906100e99190611411565b61029a565b6040516100fb9190611499565b60405180910390f35b61011e600480360381019061011991906114b4565b6103f2565b60405161012b9190611499565b60405180910390f35b61014e60048036038101906101499190611620565b610595565b005b61015861063b565b60405161016591906116fb565b60405180910390f35b61017661065f565b6040516101839190611795565b60405180910390f35b6101a660048036038101906101a19190611411565b6106ed565b6040516101b39190611499565b60405180910390f35b6101d660048036038101906101d19190611411565b61083f565b6040516101e39190611499565b60405180910390f35b6101f4610991565b60405161020191906117c6565b60405180910390f35b610212610997565b60405161021f91906117fc565b60405180910390f35b610242600480360381019061023d9190611817565b6109aa565b005b61025e60048036038101906102599190611883565b610a50565b005b61027a600480360381019061027591906118c3565b610af6565b005b610284610b9c565b6040516102919190611499565b60405180910390f35b6000806040516020016102ac9061195a565b60405160208183030381529060405280519060200120905060006102d08583610ba2565b905061031c6040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508583610c089092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f87836040518363ffffffff1660e01b8152600401610377929190611af5565b6020604051808303816000875af1158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190611b3a565b9250827fbe404c45b6b74531e0c631fa8236b0b2abbf5f24b37ee4f83b77e99b1e13aeb360405160405180910390a250509392505050565b60008060405160200161040490611bb3565b60405160208183030381529060405280519060200120905060006104288683610ba2565b90506104746040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508683610c089092919063ffffffff16565b6104be6040518060400160405280600281526020017f746f0000000000000000000000000000000000000000000000000000000000008152508583610c089092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f88836040518363ffffffff1660e01b8152600401610519929190611af5565b6020604051808303816000875af1158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190611b3a565b9250827f2f9bce8ee79bb2471696219a14b13ee8fc00b505941b718e981d7dcc58c8a61060405160405180910390a25050949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062c5733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610623929190611bd7565b60405180910390fd5b6106368383610c3b565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004805461066c90611c2f565b80601f016020809104026020016040519081016040528092919081815260200182805461069890611c2f565b80156106e55780601f106106ba576101008083540402835291602001916106e5565b820191906000526020600020905b8154815290600101906020018083116106c857829003601f168201915b505050505081565b60008061071e8460405160200161070390611cac565b60405160208183030381529060405280519060200120610ba2565b905061076a6040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508483610c089092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f86836040518363ffffffff1660e01b81526004016107c5929190611af5565b6020604051808303816000875af11580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190611b3a565b9150817f06a2b4387d37a456e7f9fcaf47b429a6079f5227f0788867c8920370872284d860405160405180910390a2509392505050565b6000806108708460405160200161085590611d0d565b60405160208183030381529060405280519060200120610ba2565b90506108bc6040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508483610c089092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f86836040518363ffffffff1660e01b8152600401610917929190611af5565b6020604051808303816000875af1158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190611b3a565b9150817f867c522a119b99440246a0577cfbd60ded830a28eb054fe6608c75b445f329e160405160405180910390a2509392505050565b60035481565b600260009054906101000a900460ff1681565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a415733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610a38929190611bd7565b60405180910390fd5b610a4b8383610c4f565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ae75733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610ade929190611bd7565b60405180910390fd5b610af18383610c5a565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b8d5733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610b84929190611bd7565b60405180910390fd5b610b978383610c78565b505050565b60015481565b610baa6111be565b610c00837f000000000000000000000000000000000000000000000000000000000000000060008086815260200190815260200160002060009054906101000a900460e01b84610c83909392919063ffffffff16565b905092915050565b610c1f828460800151610d3390919063ffffffff16565b610c36818460800151610d3390919063ffffffff16565b505050565b8060049081610c4a9190611ec4565b505050565b806001819055505050565b80600260006101000a81548160ff0219169083151502179055505050565b806003819055505050565b610c8b6111be565b610c9b8560800151610100610d58565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b610d408260038351610dc2565b610d538183610f4790919063ffffffff16565b505050565b610d6061122b565b6000602083610d6f9190611fc5565b14610d9b57602082610d819190611fc5565b6020610d8d9190612025565b82610d989190612059565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611610df957610df38160058460ff16901b60ff161784610f6990919063ffffffff16565b50610f42565b60ff8167ffffffffffffffff1611610e4f57610e28601860058460ff16901b1784610f6990919063ffffffff16565b50610e498167ffffffffffffffff16600185610f899092919063ffffffff16565b50610f41565b61ffff8167ffffffffffffffff1611610ea657610e7f601960058460ff16901b1784610f6990919063ffffffff16565b50610ea08167ffffffffffffffff16600285610f899092919063ffffffff16565b50610f40565b63ffffffff8167ffffffffffffffff1611610eff57610ed8601a60058460ff16901b1784610f6990919063ffffffff16565b50610ef98167ffffffffffffffff16600485610f899092919063ffffffff16565b50610f3f565b610f1c601b60058460ff16901b1784610f6990919063ffffffff16565b50610f3d8167ffffffffffffffff16600885610f899092919063ffffffff16565b505b5b5b5b505050565b610f4f61122b565b610f6183846000015151848551610fab565b905092915050565b610f7161122b565b610f81838460000151518461109a565b905092915050565b610f9161122b565b610fa28485600001515185856110f0565b90509392505050565b610fb361122b565b8251821115610fc157600080fd5b84602001518285610fd29190612059565b111561100757611006856002610ff788602001518887610ff29190612059565b61117e565b611001919061208d565b61119a565b5b6000808651805187602083010193508088870111156110265787860182525b60208701925050505b6020841061106d57805182526020826110489190612059565b91506020816110579190612059565b90506020846110669190612025565b935061102f565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6110a261122b565b836020015183106110c8576110c784600286602001516110c2919061208d565b61119a565b5b835180516020858301018481538186036110e3576001820183525b5050508390509392505050565b6110f861122b565b846020015184836111099190612059565b11156111315761113085600286856111219190612059565b61112b919061208d565b61119a565b5b60006001836101006111439190612202565b61114d9190612025565b905085518386820101858319825116178152815185880111156111705784870182525b505085915050949350505050565b60008183111561119057829050611194565b8190505b92915050565b6000826000015190506111ad8383610d58565b506111b88382610f47565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161122561122b565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b61127281611259565b811461127d57600080fd5b50565b60008135905061128f81611269565b92915050565b6000819050919050565b6112a881611295565b81146112b357600080fd5b50565b6000813590506112c58161129f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61131e826112d5565b810181811067ffffffffffffffff8211171561133d5761133c6112e6565b5b80604052505050565b6000611350611245565b905061135c8282611315565b919050565b600067ffffffffffffffff82111561137c5761137b6112e6565b5b611385826112d5565b9050602081019050919050565b82818337600083830152505050565b60006113b46113af84611361565b611346565b9050828152602081018484840111156113d0576113cf6112d0565b5b6113db848285611392565b509392505050565b600082601f8301126113f8576113f76112cb565b5b81356114088482602086016113a1565b91505092915050565b60008060006060848603121561142a5761142961124f565b5b600061143886828701611280565b9350506020611449868287016112b6565b925050604084013567ffffffffffffffff81111561146a57611469611254565b5b611476868287016113e3565b9150509250925092565b6000819050919050565b61149381611480565b82525050565b60006020820190506114ae600083018461148a565b92915050565b600080600080608085870312156114ce576114cd61124f565b5b60006114dc87828801611280565b94505060206114ed878288016112b6565b935050604085013567ffffffffffffffff81111561150e5761150d611254565b5b61151a878288016113e3565b925050606085013567ffffffffffffffff81111561153b5761153a611254565b5b611547878288016113e3565b91505092959194509250565b61155c81611480565b811461156757600080fd5b50565b60008135905061157981611553565b92915050565b600067ffffffffffffffff82111561159a576115996112e6565b5b6115a3826112d5565b9050602081019050919050565b60006115c36115be8461157f565b611346565b9050828152602081018484840111156115df576115de6112d0565b5b6115ea848285611392565b509392505050565b600082601f830112611607576116066112cb565b5b81356116178482602086016115b0565b91505092915050565b600080604083850312156116375761163661124f565b5b60006116458582860161156a565b925050602083013567ffffffffffffffff81111561166657611665611254565b5b611672858286016115f2565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116c16116bc6116b78461167c565b61169c565b61167c565b9050919050565b60006116d3826116a6565b9050919050565b60006116e5826116c8565b9050919050565b6116f5816116da565b82525050565b600060208201905061171060008301846116ec565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611750578082015181840152602081019050611735565b60008484015250505050565b600061176782611716565b6117718185611721565b9350611781818560208601611732565b61178a816112d5565b840191505092915050565b600060208201905081810360008301526117af818461175c565b905092915050565b6117c081611295565b82525050565b60006020820190506117db60008301846117b7565b92915050565b60008115159050919050565b6117f6816117e1565b82525050565b600060208201905061181160008301846117ed565b92915050565b6000806040838503121561182e5761182d61124f565b5b600061183c8582860161156a565b925050602061184d8582860161156a565b9150509250929050565b611860816117e1565b811461186b57600080fd5b50565b60008135905061187d81611857565b92915050565b6000806040838503121561189a5761189961124f565b5b60006118a88582860161156a565b92505060206118b98582860161186e565b9150509250929050565b600080604083850312156118da576118d961124f565b5b60006118e88582860161156a565b92505060206118f9858286016112b6565b9150509250929050565b600081905092915050565b7f626f6f6c00000000000000000000000000000000000000000000000000000000600082015250565b6000611944600483611903565b915061194f8261190e565b600482019050919050565b600061196582611937565b9150819050919050565b61197881611259565b82525050565b61198781611295565b82525050565b60006119988261167c565b9050919050565b6119a88161198d565b82525050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6119e3816119ae565b82525050565b6119f281611480565b82525050565b600082825260208201905092915050565b6000611a1482611716565b611a1e81856119f8565b9350611a2e818560208601611732565b611a37816112d5565b840191505092915050565b60006040830160008301518482036000860152611a5f8282611a09565b9150506020830151611a7460208601826119e9565b508091505092915050565b600060a083016000830151611a97600086018261197e565b506020830151611aaa602086018261199f565b506040830151611abd60408601826119da565b506060830151611ad060608601826119e9565b5060808301518482036080860152611ae88282611a42565b9150508091505092915050565b6000604082019050611b0a600083018561196f565b8181036020830152611b1c8184611a7f565b90509392505050565b600081519050611b3481611553565b92915050565b600060208284031215611b5057611b4f61124f565b5b6000611b5e84828501611b25565b91505092915050565b7f75696e7432353600000000000000000000000000000000000000000000000000600082015250565b6000611b9d600783611903565b9150611ba882611b67565b600782019050919050565b6000611bbe82611b90565b9150819050919050565b611bd18161198d565b82525050565b6000604082019050611bec6000830185611bc8565b611bf96020830184611bc8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611c4757607f821691505b602082108103611c5a57611c59611c00565b5b50919050565b7f6279746573000000000000000000000000000000000000000000000000000000600082015250565b6000611c96600583611903565b9150611ca182611c60565b600582019050919050565b6000611cb782611c89565b9150819050919050565b7f6279746573333200000000000000000000000000000000000000000000000000600082015250565b6000611cf7600783611903565b9150611d0282611cc1565b600782019050919050565b6000611d1882611cea565b9150819050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611d847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d47565b611d8e8683611d47565b95508019841693508086168417925050509392505050565b6000611dc1611dbc611db784611480565b61169c565b611480565b9050919050565b6000819050919050565b611ddb83611da6565b611def611de782611dc8565b848454611d54565b825550505050565b600090565b611e04611df7565b611e0f818484611dd2565b505050565b5b81811015611e3357611e28600082611dfc565b600181019050611e15565b5050565b601f821115611e7857611e4981611d22565b611e5284611d37565b81016020851015611e61578190505b611e75611e6d85611d37565b830182611e14565b50505b505050565b600082821c905092915050565b6000611e9b60001984600802611e7d565b1980831691505092915050565b6000611eb48383611e8a565b9150826002028217905092915050565b611ecd82611716565b67ffffffffffffffff811115611ee657611ee56112e6565b5b611ef08254611c2f565b611efb828285611e37565b600060209050601f831160018114611f2e5760008415611f1c578287015190505b611f268582611ea8565b865550611f8e565b601f198416611f3c86611d22565b60005b82811015611f6457848901518255600182019150602085019450602081019050611f3f565b86831015611f815784890151611f7d601f891682611e8a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611fd082611480565b9150611fdb83611480565b925082611feb57611fea611f96565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061203082611480565b915061203b83611480565b925082820390508181111561205357612052611ff6565b5b92915050565b600061206482611480565b915061206f83611480565b925082820190508082111561208757612086611ff6565b5b92915050565b600061209882611480565b91506120a383611480565b92508282026120b181611480565b915082820484148315176120c8576120c7611ff6565b5b5092915050565b60008160011c9050919050565b6000808291508390505b60018511156121265780860481111561210257612101611ff6565b5b60018516156121115780820291505b808102905061211f856120cf565b94506120e6565b94509492505050565b60008261213f57600190506121fb565b8161214d57600090506121fb565b8160018114612163576002811461216d5761219c565b60019150506121fb565b60ff84111561217f5761217e611ff6565b5b8360020a91508482111561219657612195611ff6565b5b506121fb565b5060208310610133831016604e8410600b84101617156121d15782820a9050838111156121cc576121cb611ff6565b5b6121fb565b6121de84848460016120dc565b925090508184048111156121f5576121f4611ff6565b5b81810290505b9392505050565b600061220d82611480565b915061221883611480565b92506122457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461212f565b90509291505056fea26469706673582212202d23e33cee9a25a1142859abdc557e0d5d18ce8d40ae6b0ba9f8592f7132911464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80634ef910821161008c57806377f262ea1161006657806377f262ea1461022857806390d95efc14610244578063f40b4def14610260578063feac766d1461027c576100cf565b80634ef91082146101bc578063513bd64d146101ec5780636dfe4e4c1461020a576100cf565b8063037cd9cc146100d4578063148b424e1461010457806319e2cd2f146101345780633b2bcbf11461015057806346742eff1461016e5780634ef0fff31461018c575b600080fd5b6100ee60048036038101906100e99190611411565b61029a565b6040516100fb9190611499565b60405180910390f35b61011e600480360381019061011991906114b4565b6103f2565b60405161012b9190611499565b60405180910390f35b61014e60048036038101906101499190611620565b610595565b005b61015861063b565b60405161016591906116fb565b60405180910390f35b61017661065f565b6040516101839190611795565b60405180910390f35b6101a660048036038101906101a19190611411565b6106ed565b6040516101b39190611499565b60405180910390f35b6101d660048036038101906101d19190611411565b61083f565b6040516101e39190611499565b60405180910390f35b6101f4610991565b60405161020191906117c6565b60405180910390f35b610212610997565b60405161021f91906117fc565b60405180910390f35b610242600480360381019061023d9190611817565b6109aa565b005b61025e60048036038101906102599190611883565b610a50565b005b61027a600480360381019061027591906118c3565b610af6565b005b610284610b9c565b6040516102919190611499565b60405180910390f35b6000806040516020016102ac9061195a565b60405160208183030381529060405280519060200120905060006102d08583610ba2565b905061031c6040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508583610c089092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f87836040518363ffffffff1660e01b8152600401610377929190611af5565b6020604051808303816000875af1158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190611b3a565b9250827fbe404c45b6b74531e0c631fa8236b0b2abbf5f24b37ee4f83b77e99b1e13aeb360405160405180910390a250509392505050565b60008060405160200161040490611bb3565b60405160208183030381529060405280519060200120905060006104288683610ba2565b90506104746040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508683610c089092919063ffffffff16565b6104be6040518060400160405280600281526020017f746f0000000000000000000000000000000000000000000000000000000000008152508583610c089092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f88836040518363ffffffff1660e01b8152600401610519929190611af5565b6020604051808303816000875af1158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190611b3a565b9250827f2f9bce8ee79bb2471696219a14b13ee8fc00b505941b718e981d7dcc58c8a61060405160405180910390a25050949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062c5733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610623929190611bd7565b60405180910390fd5b6106368383610c3b565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004805461066c90611c2f565b80601f016020809104026020016040519081016040528092919081815260200182805461069890611c2f565b80156106e55780601f106106ba576101008083540402835291602001916106e5565b820191906000526020600020905b8154815290600101906020018083116106c857829003601f168201915b505050505081565b60008061071e8460405160200161070390611cac565b60405160208183030381529060405280519060200120610ba2565b905061076a6040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508483610c089092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f86836040518363ffffffff1660e01b81526004016107c5929190611af5565b6020604051808303816000875af11580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190611b3a565b9150817f06a2b4387d37a456e7f9fcaf47b429a6079f5227f0788867c8920370872284d860405160405180910390a2509392505050565b6000806108708460405160200161085590611d0d565b60405160208183030381529060405280519060200120610ba2565b90506108bc6040518060400160405280600481526020017f66726f6d000000000000000000000000000000000000000000000000000000008152508483610c089092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f86836040518363ffffffff1660e01b8152600401610917929190611af5565b6020604051808303816000875af1158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190611b3a565b9150817f867c522a119b99440246a0577cfbd60ded830a28eb054fe6608c75b445f329e160405160405180910390a2509392505050565b60035481565b600260009054906101000a900460ff1681565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a415733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610a38929190611bd7565b60405180910390fd5b610a4b8383610c4f565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ae75733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610ade929190611bd7565b60405180910390fd5b610af18383610c5a565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b8d5733816040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610b84929190611bd7565b60405180910390fd5b610b978383610c78565b505050565b60015481565b610baa6111be565b610c00837f000000000000000000000000000000000000000000000000000000000000000060008086815260200190815260200160002060009054906101000a900460e01b84610c83909392919063ffffffff16565b905092915050565b610c1f828460800151610d3390919063ffffffff16565b610c36818460800151610d3390919063ffffffff16565b505050565b8060049081610c4a9190611ec4565b505050565b806001819055505050565b80600260006101000a81548160ff0219169083151502179055505050565b806003819055505050565b610c8b6111be565b610c9b8560800151610100610d58565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b610d408260038351610dc2565b610d538183610f4790919063ffffffff16565b505050565b610d6061122b565b6000602083610d6f9190611fc5565b14610d9b57602082610d819190611fc5565b6020610d8d9190612025565b82610d989190612059565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611610df957610df38160058460ff16901b60ff161784610f6990919063ffffffff16565b50610f42565b60ff8167ffffffffffffffff1611610e4f57610e28601860058460ff16901b1784610f6990919063ffffffff16565b50610e498167ffffffffffffffff16600185610f899092919063ffffffff16565b50610f41565b61ffff8167ffffffffffffffff1611610ea657610e7f601960058460ff16901b1784610f6990919063ffffffff16565b50610ea08167ffffffffffffffff16600285610f899092919063ffffffff16565b50610f40565b63ffffffff8167ffffffffffffffff1611610eff57610ed8601a60058460ff16901b1784610f6990919063ffffffff16565b50610ef98167ffffffffffffffff16600485610f899092919063ffffffff16565b50610f3f565b610f1c601b60058460ff16901b1784610f6990919063ffffffff16565b50610f3d8167ffffffffffffffff16600885610f899092919063ffffffff16565b505b5b5b5b505050565b610f4f61122b565b610f6183846000015151848551610fab565b905092915050565b610f7161122b565b610f81838460000151518461109a565b905092915050565b610f9161122b565b610fa28485600001515185856110f0565b90509392505050565b610fb361122b565b8251821115610fc157600080fd5b84602001518285610fd29190612059565b111561100757611006856002610ff788602001518887610ff29190612059565b61117e565b611001919061208d565b61119a565b5b6000808651805187602083010193508088870111156110265787860182525b60208701925050505b6020841061106d57805182526020826110489190612059565b91506020816110579190612059565b90506020846110669190612025565b935061102f565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6110a261122b565b836020015183106110c8576110c784600286602001516110c2919061208d565b61119a565b5b835180516020858301018481538186036110e3576001820183525b5050508390509392505050565b6110f861122b565b846020015184836111099190612059565b11156111315761113085600286856111219190612059565b61112b919061208d565b61119a565b5b60006001836101006111439190612202565b61114d9190612025565b905085518386820101858319825116178152815185880111156111705784870182525b505085915050949350505050565b60008183111561119057829050611194565b8190505b92915050565b6000826000015190506111ad8383610d58565b506111b88382610f47565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161122561122b565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b61127281611259565b811461127d57600080fd5b50565b60008135905061128f81611269565b92915050565b6000819050919050565b6112a881611295565b81146112b357600080fd5b50565b6000813590506112c58161129f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61131e826112d5565b810181811067ffffffffffffffff8211171561133d5761133c6112e6565b5b80604052505050565b6000611350611245565b905061135c8282611315565b919050565b600067ffffffffffffffff82111561137c5761137b6112e6565b5b611385826112d5565b9050602081019050919050565b82818337600083830152505050565b60006113b46113af84611361565b611346565b9050828152602081018484840111156113d0576113cf6112d0565b5b6113db848285611392565b509392505050565b600082601f8301126113f8576113f76112cb565b5b81356114088482602086016113a1565b91505092915050565b60008060006060848603121561142a5761142961124f565b5b600061143886828701611280565b9350506020611449868287016112b6565b925050604084013567ffffffffffffffff81111561146a57611469611254565b5b611476868287016113e3565b9150509250925092565b6000819050919050565b61149381611480565b82525050565b60006020820190506114ae600083018461148a565b92915050565b600080600080608085870312156114ce576114cd61124f565b5b60006114dc87828801611280565b94505060206114ed878288016112b6565b935050604085013567ffffffffffffffff81111561150e5761150d611254565b5b61151a878288016113e3565b925050606085013567ffffffffffffffff81111561153b5761153a611254565b5b611547878288016113e3565b91505092959194509250565b61155c81611480565b811461156757600080fd5b50565b60008135905061157981611553565b92915050565b600067ffffffffffffffff82111561159a576115996112e6565b5b6115a3826112d5565b9050602081019050919050565b60006115c36115be8461157f565b611346565b9050828152602081018484840111156115df576115de6112d0565b5b6115ea848285611392565b509392505050565b600082601f830112611607576116066112cb565b5b81356116178482602086016115b0565b91505092915050565b600080604083850312156116375761163661124f565b5b60006116458582860161156a565b925050602083013567ffffffffffffffff81111561166657611665611254565b5b611672858286016115f2565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116c16116bc6116b78461167c565b61169c565b61167c565b9050919050565b60006116d3826116a6565b9050919050565b60006116e5826116c8565b9050919050565b6116f5816116da565b82525050565b600060208201905061171060008301846116ec565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611750578082015181840152602081019050611735565b60008484015250505050565b600061176782611716565b6117718185611721565b9350611781818560208601611732565b61178a816112d5565b840191505092915050565b600060208201905081810360008301526117af818461175c565b905092915050565b6117c081611295565b82525050565b60006020820190506117db60008301846117b7565b92915050565b60008115159050919050565b6117f6816117e1565b82525050565b600060208201905061181160008301846117ed565b92915050565b6000806040838503121561182e5761182d61124f565b5b600061183c8582860161156a565b925050602061184d8582860161156a565b9150509250929050565b611860816117e1565b811461186b57600080fd5b50565b60008135905061187d81611857565b92915050565b6000806040838503121561189a5761189961124f565b5b60006118a88582860161156a565b92505060206118b98582860161186e565b9150509250929050565b600080604083850312156118da576118d961124f565b5b60006118e88582860161156a565b92505060206118f9858286016112b6565b9150509250929050565b600081905092915050565b7f626f6f6c00000000000000000000000000000000000000000000000000000000600082015250565b6000611944600483611903565b915061194f8261190e565b600482019050919050565b600061196582611937565b9150819050919050565b61197881611259565b82525050565b61198781611295565b82525050565b60006119988261167c565b9050919050565b6119a88161198d565b82525050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6119e3816119ae565b82525050565b6119f281611480565b82525050565b600082825260208201905092915050565b6000611a1482611716565b611a1e81856119f8565b9350611a2e818560208601611732565b611a37816112d5565b840191505092915050565b60006040830160008301518482036000860152611a5f8282611a09565b9150506020830151611a7460208601826119e9565b508091505092915050565b600060a083016000830151611a97600086018261197e565b506020830151611aaa602086018261199f565b506040830151611abd60408601826119da565b506060830151611ad060608601826119e9565b5060808301518482036080860152611ae88282611a42565b9150508091505092915050565b6000604082019050611b0a600083018561196f565b8181036020830152611b1c8184611a7f565b90509392505050565b600081519050611b3481611553565b92915050565b600060208284031215611b5057611b4f61124f565b5b6000611b5e84828501611b25565b91505092915050565b7f75696e7432353600000000000000000000000000000000000000000000000000600082015250565b6000611b9d600783611903565b9150611ba882611b67565b600782019050919050565b6000611bbe82611b90565b9150819050919050565b611bd18161198d565b82525050565b6000604082019050611bec6000830185611bc8565b611bf96020830184611bc8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611c4757607f821691505b602082108103611c5a57611c59611c00565b5b50919050565b7f6279746573000000000000000000000000000000000000000000000000000000600082015250565b6000611c96600583611903565b9150611ca182611c60565b600582019050919050565b6000611cb782611c89565b9150819050919050565b7f6279746573333200000000000000000000000000000000000000000000000000600082015250565b6000611cf7600783611903565b9150611d0282611cc1565b600782019050919050565b6000611d1882611cea565b9150819050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611d847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d47565b611d8e8683611d47565b95508019841693508086168417925050509392505050565b6000611dc1611dbc611db784611480565b61169c565b611480565b9050919050565b6000819050919050565b611ddb83611da6565b611def611de782611dc8565b848454611d54565b825550505050565b600090565b611e04611df7565b611e0f818484611dd2565b505050565b5b81811015611e3357611e28600082611dfc565b600181019050611e15565b5050565b601f821115611e7857611e4981611d22565b611e5284611d37565b81016020851015611e61578190505b611e75611e6d85611d37565b830182611e14565b50505b505050565b600082821c905092915050565b6000611e9b60001984600802611e7d565b1980831691505092915050565b6000611eb48383611e8a565b9150826002028217905092915050565b611ecd82611716565b67ffffffffffffffff811115611ee657611ee56112e6565b5b611ef08254611c2f565b611efb828285611e37565b600060209050601f831160018114611f2e5760008415611f1c578287015190505b611f268582611ea8565b865550611f8e565b601f198416611f3c86611d22565b60005b82811015611f6457848901518255600182019150602085019450602081019050611f3f565b86831015611f815784890151611f7d601f891682611e8a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611fd082611480565b9150611fdb83611480565b925082611feb57611fea611f96565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061203082611480565b915061203b83611480565b925082820390508181111561205357612052611ff6565b5b92915050565b600061206482611480565b915061206f83611480565b925082820190508082111561208757612086611ff6565b5b92915050565b600061209882611480565b91506120a383611480565b92508282026120b181611480565b915082820484148315176120c8576120c7611ff6565b5b5092915050565b60008160011c9050919050565b6000808291508390505b60018511156121265780860481111561210257612101611ff6565b5b60018516156121115780820291505b808102905061211f856120cf565b94506120e6565b94509492505050565b60008261213f57600190506121fb565b8161214d57600090506121fb565b8160018114612163576002811461216d5761219c565b60019150506121fb565b60ff84111561217f5761217e611ff6565b5b8360020a91508482111561219657612195611ff6565b5b506121fb565b5060208310610133831016604e8410600b84101617156121d15782820a9050838111156121cc576121cb611ff6565b5b6121fb565b6121de84848460016120dc565b925090508184048111156121f5576121f4611ff6565b5b81810290505b9392505050565b600061220d82611480565b915061221883611480565b92506122457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461212f565b90509291505056fea26469706673582212202d23e33cee9a25a1142859abdc557e0d5d18ce8d40ae6b0ba9f8592f7132911464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "sTypeIdToFunctionSelector",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes4)"
      },
      {
        "astId": 1595,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastUint256",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1597,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastBool",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1599,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastBytes32",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 1601,
        "contract": "src/mock/MockADCSConsumer.sol:MockADCSConsumer",
        "label": "lastBytes",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}