{
  "address": "0x15aE2d3974FB1ceC492Ec1Feba9b3f84CA357B36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "DataFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        }
      ],
      "name": "MemecoinNotFound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        }
      ],
      "name": "TradeSuccess",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract IADCSCoordinator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "addMemeCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMemeCoin",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMemeCoinCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memeCoinAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "memeCoins",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "response",
              "type": "bool"
            }
          ],
          "internalType": "struct ADCSConsumerBase.StringAndBool",
          "name": "response",
          "type": "tuple"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "jobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "callbackGasLimit",
          "type": "uint256"
        }
      ],
      "name": "requestTradeMemeCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setWethAmountForTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAmountForTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0af99b3ecd6e7bbd98b94e9b8de71594156613c27483d527243069be07c76a63",
  "receipt": {
    "to": null,
    "from": "0x8b736035BbDA71825e0219f5FE4DfB22C35FbDDC",
    "contractAddress": "0x15aE2d3974FB1ceC492Ec1Feba9b3f84CA357B36",
    "transactionIndex": 5,
    "gasUsed": "3015898",
    "logsBloom": "0x
    "blockHash": "0x42044218f675621110c99cad629bb1a1477cd77c4463753842f51d214e375f1c",
    "transactionHash": "0x0af99b3ecd6e7bbd98b94e9b8de71594156613c27483d527243069be07c76a63",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 273922690,
        "transactionHash": "0x0af99b3ecd6e7bbd98b94e9b8de71594156613c27483d527243069be07c76a63",
        "address": "0x15aE2d3974FB1ceC492Ec1Feba9b3f84CA357B36",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b736035bbda71825e0219f5fe4dfb22c35fbddc"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x42044218f675621110c99cad629bb1a1477cd77c4463753842f51d214e375f1c"
      }
    ],
    "blockNumber": 273922690,
    "cumulativeGasUsed": "5127809",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x07811b8B6151db734b8D1568918d3A62607879a7",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 16,
  "solcInputHash": "e27f1b5a4eb53d647997899a34d80247",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"DataFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"MemecoinNotFound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"TradeSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IADCSCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"addMemeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMemeCoin\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMemeCoinCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memeCoinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memeCoins\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"internalType\":\"struct ADCSConsumerBase.StringAndBool\",\"name\":\"response\",\"type\":\"tuple\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"name\":\"requestTradeMemeCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWethAmountForTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAmountForTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addMemeCoin(string,address,uint8)\":{\"params\":{\"addr\":\"The contract address of the memecoin\",\"decimals\":\"The decimals of the memecoin\",\"name\":\"The name of the memecoin\"}},\"getMemeCoin(uint256)\":{\"params\":{\"index\":\"The index in the memecoins array\"},\"returns\":{\"addr\":\"The memecoin contract address\",\"decimals\":\"The decimals of the memecoin\",\"name\":\"The memecoin name\"}},\"getMemeCoinCount()\":{\"returns\":{\"_0\":\"The length of the memecoins array\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMemeCoin(string,address,uint8)\":{\"notice\":\"Add a new memecoin to the list\"},\"getMemeCoin(uint256)\":{\"notice\":\"Get a memecoin by index\"},\"getMemeCoinCount()\":{\"notice\":\"Get the total number of memecoins in the list\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mock/MockTradeMemeCoin.sol\":\"MockTradeMemeCoin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"src/ADCSConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IADCSCoordinator.sol\\\";\\n\\nabstract contract ADCSConsumerBase {\\n    using ADCS for ADCS.Request;\\n\\n    struct StringAndBool {\\n        string name;\\n        bool response;\\n    }\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    mapping(bytes32 => bytes4) private sTypeIdToFunctionSelector;\\n    IADCSCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _adcsResponseCoordinator address of ADCSCoordinator contract\\n     */\\n    constructor(address _adcsResponseCoordinator) {\\n        COORDINATOR = IADCSCoordinator(_adcsResponseCoordinator);\\n\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint256\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint256\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"stringAndbool\\\"))] = COORDINATOR\\n            .fulfillDataRequestStringAndBool\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @param typeId the reponse type ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(\\n        bytes32 jobId,\\n        bytes32 typeId\\n    ) internal view returns (ADCS.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sTypeIdToFunctionSelector[typeId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa1030108fcef4a9ed262e889c3110a0de6c67a6a6d5cc344914ec082935c9909\",\"license\":\"MIT\"},\"src/ADCSConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ADCSConsumerBase.sol\\\";\\n\\nabstract contract ADCSConsumerFulfillUint256 is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBool is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBytes32 is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBytes is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillStringAndBool is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, StringAndBool memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        StringAndBool memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x83a0b1eb7cd2681fc73b9f30c6235e90601c390dec59623768ffd25310a85b6b\",\"license\":\"MIT\"},\"src/interfaces/IADCSCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IADCSCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IADCSCoordinator is IADCSCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x675f3774f7561f7d2f74f9dac020bad81154f1bba3af7d4c22e57e595a9e7769\",\"license\":\"MIT\"},\"src/interfaces/IADCSCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/ADCS.sol\\\";\\n\\ninterface IADCSCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint256 callbackGasLimit;\\n        address sender;\\n        bytes32 jobId;\\n    }\\n\\n    struct StringAndBool {\\n        string name;\\n        bool response;\\n    }\\n\\n    function requestData(\\n        uint256 callbackGasLimit,\\n        ADCS.Request memory req\\n    ) external returns (uint256);\\n\\n    function fulfillDataRequestUint256(\\n        uint256 requestId,\\n        uint256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestStringAndBool(\\n        uint256 requestId,\\n        StringAndBool memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1226105197d6e8fb1c2d6ebf0f30474a57ba3aeced4b80dc566df2518d98cb26\",\"license\":\"MIT\"},\"src/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     */\\n    function setConfig(uint256 maxGasLimit, uint256 gasAfterPaymentCalculation) external;\\n\\n    function pendingRequestExists(address consumer, uint64 nonce) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n}\\n\",\"keccak256\":\"0x13d5eef37f3fb4fab261624a4649469780fee256464e972f6c179135731d8fea\",\"license\":\"MIT\"},\"src/libraries/ADCS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary ADCS {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (ADCS.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0x5c143d8c51913e10b156ad7f83a6b58b905b68c7b6aaa68982cd4ba60eb8d6c2\",\"license\":\"MIT\"},\"src/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"src/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/mock/MockTradeMemeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ADCSConsumerFulfill.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MockTradeMemeCoin is ADCSConsumerFulfillStringAndBool, Ownable {\\n    using ADCS for ADCS.Request;\\n\\n    // Store the last received response for testing\\n    bytes public lastResponse;\\n    uint256 public lastRequestId;\\n    uint256 public wethAmountForTrade = 1000000000000000; // 0.001 WETH\\n    uint256 public memeCoinAmount = 100; // 100 memecoin\\n\\n    struct MemeCoin {\\n        string name;\\n        address addr;\\n        uint8 decimals;\\n    }\\n\\n    MemeCoin[] public memeCoins;\\n\\n    event DataRequested(uint256 indexed requestId);\\n    event DataFulfilled(uint256 indexed requestId, bytes response);\\n    event MemecoinNotFound(string tokenName);\\n    event TradeSuccess(uint256 indexed requestId, uint256 amountIn, bool isBuy);\\n\\n    address public immutable WETH;\\n    ISwapRouter public immutable swapRouter;\\n\\n    constructor(\\n        address _coordinator,\\n        address _weth,\\n        address _swapRouter\\n    ) ADCSConsumerBase(_coordinator) Ownable(msg.sender) {\\n        WETH = _weth;\\n        swapRouter = ISwapRouter(_swapRouter);\\n    }\\n\\n    function setWethAmountForTrade(uint256 amount) external onlyOwner {\\n        wethAmountForTrade = amount;\\n    }\\n\\n    /**\\n     * @notice Add a new memecoin to the list\\n     * @param name The name of the memecoin\\n     * @param addr The contract address of the memecoin\\n     * @param decimals The decimals of the memecoin\\n     */\\n    function addMemeCoin(string memory name, address addr, uint8 decimals) external onlyOwner {\\n        memeCoins.push(MemeCoin({name: name, addr: addr, decimals: decimals}));\\n    }\\n\\n    /**\\n     * @notice Get the total number of memecoins in the list\\n     * @return The length of the memecoins array\\n     */\\n    function getMemeCoinCount() external view returns (uint256) {\\n        return memeCoins.length;\\n    }\\n\\n    /**\\n     * @notice Get a memecoin by index\\n     * @param index The index in the memecoins array\\n     * @return name The memecoin name\\n     * @return addr The memecoin contract address\\n     * @return decimals The decimals of the memecoin\\n     */\\n    function getMemeCoin(\\n        uint256 index\\n    ) external view returns (string memory name, address addr, uint8 decimals) {\\n        require(index < memeCoins.length, \\\"Index out of bounds\\\");\\n        MemeCoin memory coin = memeCoins[index];\\n        return (coin.name, coin.addr, coin.decimals);\\n    }\\n\\n    // Function to request bytes data\\n    function requestTradeMemeCoin(\\n        bytes32 jobId,\\n        uint256 callbackGasLimit\\n    ) external returns (uint256 requestId) {\\n        bytes32 typeId = keccak256(abi.encodePacked(\\\"stringAndbool\\\"));\\n        ADCS.Request memory req = buildRequest(jobId, typeId);\\n        requestId = COORDINATOR.requestData(callbackGasLimit, req);\\n        emit DataRequested(requestId);\\n        return requestId;\\n    }\\n\\n    function fulfillDataRequest(\\n        uint256 requestId,\\n        StringAndBool memory response\\n    ) internal virtual override {\\n        string memory tokenName = response.name;\\n        bool result = response.response;\\n        // Find memecoin address and decimals by name\\n        tradeMemeCoin(requestId, tokenName, result);\\n    }\\n\\n    function tradeMemeCoin(uint256 requestId, string memory tokenName, bool result) internal {\\n        // Find memecoin address and decimals by name\\n        address memeTokenAddress;\\n        uint8 tokenDecimals;\\n        for (uint i = 0; i < memeCoins.length; i++) {\\n            if (keccak256(bytes(memeCoins[i].name)) == keccak256(bytes(tokenName))) {\\n                memeTokenAddress = memeCoins[i].addr;\\n                tokenDecimals = memeCoins[i].decimals;\\n                break;\\n            }\\n        }\\n        if (memeTokenAddress == address(0)) {\\n            emit MemecoinNotFound(tokenName);\\n            return;\\n        }\\n\\n        // Execute trade through Uniswap V3\\n        if (result) {\\n            // buy memecoin with eth\\n            IERC20(WETH).approve(address(swapRouter), wethAmountForTrade);\\n            swapRouter.exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: WETH,\\n                    tokenOut: memeTokenAddress,\\n                    fee: 3000,\\n                    recipient: address(this),\\n                    deadline: block.timestamp + 15 minutes,\\n                    amountIn: wethAmountForTrade,\\n                    amountOutMinimum: 0,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n\\n            emit TradeSuccess(requestId, wethAmountForTrade, true);\\n        } else {\\n            // sell memecoin for eth\\n            // First approve router to spend our tokens\\n            uint256 memeCoinAmountInWei = memeCoinAmount * (10 ** tokenDecimals);\\n            IERC20(memeTokenAddress).approve(address(swapRouter), memeCoinAmountInWei);\\n\\n            swapRouter.exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: memeTokenAddress, // memecoin token\\n                    tokenOut: WETH, // eth\\n                    fee: 3000, // 0.3% fee tier\\n                    recipient: address(this),\\n                    deadline: block.timestamp + 15 minutes,\\n                    amountIn: memeCoinAmountInWei,\\n                    amountOutMinimum: 0, // Set minimum amount out to 0 (should use proper slippage in production)\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n            emit TradeSuccess(requestId, memeCoinAmountInWei, false);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function withdrawToken(address token) external onlyOwner {\\n        IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x5200fd78ae9392ccea4e8817e6ce204a6e1e4dbc86053a0978430c2b3dbb7471\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405266038d7ea4c6800060045560646005553480156200002157600080fd5b50604051620030433803806200304383398181016040528101906200004791906200046d565b33838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505063e9d3462860e01b600080604051602001620000999062000524565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c0217905550634b9c308360e01b600080604051602001620000f4906200058b565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c0217905550631228cabf60e01b6000806040516020016200014f90620005f2565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055506329ba70c460e01b600080604051602001620001aa9062000659565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c0217905550632f44d44960e01b6000806040516020016200020590620006c0565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620002ba5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620002b19190620006e8565b60405180910390fd5b620002cb816200033d60201b60201c565b508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000705565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004358262000408565b9050919050565b620004478162000428565b81146200045357600080fd5b50565b60008151905062000467816200043c565b92915050565b60008060006060848603121562000489576200048862000403565b5b6000620004998682870162000456565b9350506020620004ac8682870162000456565b9250506040620004bf8682870162000456565b9150509250925092565b600081905092915050565b7f75696e7432353600000000000000000000000000000000000000000000000000600082015250565b60006200050c600783620004c9565b91506200051982620004d4565b600782019050919050565b60006200053182620004fd565b9150819050919050565b7f626f6f6c00000000000000000000000000000000000000000000000000000000600082015250565b600062000573600483620004c9565b915062000580826200053b565b600482019050919050565b6000620005988262000564565b9150819050919050565b7f6279746573333200000000000000000000000000000000000000000000000000600082015250565b6000620005da600783620004c9565b9150620005e782620005a2565b600782019050919050565b6000620005ff82620005cb565b9150819050919050565b7f6279746573000000000000000000000000000000000000000000000000000000600082015250565b600062000641600583620004c9565b91506200064e8262000609565b600582019050919050565b6000620006668262000632565b9150819050919050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b6000620006a8600d83620004c9565b9150620006b58262000670565b600d82019050919050565b6000620006cd8262000699565b9150819050919050565b620006e28162000428565b82525050565b6000602082019050620006ff6000830184620006d7565b92915050565b60805160a05160c0516128c86200077b60003960008181610b0d01528181611057015281816110dc015281816112be01526113410152600081816108fc0152818161101b0152818161112401526113a5015260008181610461015281816106a401528181610b690152610e5901526128c86000f3fe6080604052600436106101185760003560e01c8063ad5c4648116100a0578063da6868f711610064578063da6868f714610376578063da7f08b8146103b3578063e4f39ccb146103de578063f2fde38b14610409578063fc2a88c3146104325761011f565b8063ad5c46481461028f578063af6c798a146102ba578063b0ff40e7146102f9578063b859b74314610322578063c31c9c071461034b5761011f565b806362747e42116100e757806362747e42146101ce578063715018a6146101f9578063813f0e5a14610210578063894760691461023b5780638da5cb5b146102645761011f565b80630e2c871f1461012457806329c275b61461014d5780633b2bcbf11461018c5780633ccfd60b146101b75761011f565b3661011f57005b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906118cf565b61045d565b005b34801561015957600080fd5b50610174600480360381019061016f919061192b565b610503565b60405161018393929190611a34565b60405180910390f35b34801561019857600080fd5b506101a16106a2565b6040516101ae9190611ad1565b60405180910390f35b3480156101c357600080fd5b506101cc6106c6565b005b3480156101da57600080fd5b506101e361071e565b6040516101f09190611b41565b60405180910390f35b34801561020557600080fd5b5061020e6107ac565b005b34801561021c57600080fd5b506102256107c0565b6040516102329190611b72565b60405180910390f35b34801561024757600080fd5b50610262600480360381019061025d9190611bb9565b6107c6565b005b34801561027057600080fd5b506102796108d0565b6040516102869190611be6565b60405180910390f35b34801561029b57600080fd5b506102a46108fa565b6040516102b19190611be6565b60405180910390f35b3480156102c657600080fd5b506102e160048036038101906102dc919061192b565b61091e565b6040516102f093929190611a34565b60405180910390f35b34801561030557600080fd5b50610320600480360381019061031b919061192b565b610a0d565b005b34801561032e57600080fd5b5061034960048036038101906103449190611c2d565b610a1f565b005b34801561035757600080fd5b50610360610b0b565b60405161036d9190611cbd565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190611d0e565b610b2f565b6040516103aa9190611b72565b60405180910390f35b3480156103bf57600080fd5b506103c8610c3c565b6040516103d59190611b72565b60405180910390f35b3480156103ea57600080fd5b506103f3610c49565b6040516104009190611b72565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190611bb9565b610c4f565b005b34801561043e57600080fd5b50610447610cd5565b6040516104549190611b72565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104f45733816040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104eb929190611d4e565b60405180910390fd5b6104fe8383610cdb565b505050565b6060600080600680549050841061054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054690611dc3565b60405180910390fd5b60006006858154811061056557610564611de3565b5b906000526020600020906002020160405180606001604052908160008201805461058e90611e41565b80601f01602080910402602001604051908101604052809291908181526020018280546105ba90611e41565b80156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151935093509350509193909250565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106ce610cfe565b6106d66108d0565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561071b573d6000803e3d6000fd5b50565b6002805461072b90611e41565b80601f016020809104026020016040519081016040528092919081815260200182805461075790611e41565b80156107a45780601f10610779576101008083540402835291602001916107a4565b820191906000526020600020905b81548152906001019060200180831161078757829003601f168201915b505050505081565b6107b4610cfe565b6107be6000610d85565b565b60055481565b6107ce610cfe565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6107f26108d0565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161082b9190611be6565b602060405180830381865afa158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190611e87565b6040518363ffffffff1660e01b8152600401610889929190611eb4565b6020604051808303816000875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190611ef2565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6006818154811061092e57600080fd5b906000526020600020906002020160009150905080600001805461095190611e41565b80601f016020809104026020016040519081016040528092919081815260200182805461097d90611e41565b80156109ca5780601f1061099f576101008083540402835291602001916109ca565b820191906000526020600020905b8154815290600101906020018083116109ad57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b610a15610cfe565b8060048190555050565b610a27610cfe565b600660405180606001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1681525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610a9b91906120c1565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360ff1602179055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080604051602001610b41906121ea565b6040516020818303038152906040528051906020012090506000610b658583610e4b565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663db750a2d85836040518363ffffffff1660e01b8152600401610bc2929190612364565b6020604051808303816000875af1158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190611e87565b9250827f35627151f04080049c4603628b94879b241dc64b255b7347a7632165d45ee51e60405160405180910390a2505092915050565b6000600680549050905090565b60045481565b610c57610cfe565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cc95760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cc09190611be6565b60405180910390fd5b610cd281610d85565b50565b60035481565b600081600001519050600082602001519050610cf8848383610eb1565b50505050565b610d066114e8565b73ffffffffffffffffffffffffffffffffffffffff16610d246108d0565b73ffffffffffffffffffffffffffffffffffffffff1614610d8357610d476114e8565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d7a9190611be6565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610e5361160a565b610ea9837f000000000000000000000000000000000000000000000000000000000000000060008086815260200190815260200160002060009054906101000a900460e01b846114f0909392919063ffffffff16565b905092915050565b60008060005b600680549050811015610fa057848051906020012060068281548110610ee057610edf611de3565b5b9060005260206000209060020201600001604051610efe9190612437565b604051809103902003610f8d5760068181548110610f1f57610f1e611de3565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060068181548110610f6757610f66611de3565b5b906000526020600020906002020160010160149054906101000a900460ff169150610fa0565b8080610f989061247d565b915050610eb7565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611013577f563ebd046dc43cc5667717e18c14710259a4632f4366792e5cd6cc73181b07e88460405161100491906124c5565b60405180910390a150506114e3565b8215611282577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006004546040518363ffffffff1660e01b8152600401611096929190611eb4565b6020604051808303816000875af11580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d99190611ef2565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001610384426111b191906124e7565b8152602001600454815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b81526004016111fc91906125ea565b6020604051808303816000875af115801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123f9190611e87565b50847ffe937b9910f382875858f98d3eb21489abb83ab3a3c479a2f38f3e22e18a551c6004546001604051611275929190612615565b60405180910390a26114e0565b600081600a6112919190612771565b60055461129e91906127bc565b90508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016112fb929190611eb4565b6020604051808303816000875af115801561131a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133e9190611ef2565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016103844261141691906124e7565b815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b815260040161145f91906125ea565b6020604051808303816000875af115801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a29190611e87565b50857ffe937b9910f382875858f98d3eb21489abb83ab3a3c479a2f38f3e22e18a551c8260006040516114d6929190612615565b60405180910390a2505b50505b505050565b600033905090565b6114f861160a565b61150885608001516101006115a0565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6115a8611677565b60006020836115b7919061282d565b146115e3576020826115c9919061282d565b60206115d5919061285e565b826115e091906124e7565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001611671611677565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6116b8816116a5565b81146116c357600080fd5b50565b6000813590506116d5816116af565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611729826116e0565b810181811067ffffffffffffffff82111715611748576117476116f1565b5b80604052505050565b600061175b611691565b90506117678282611720565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611796576117956116f1565b5b61179f826116e0565b9050602081019050919050565b82818337600083830152505050565b60006117ce6117c98461177b565b611751565b9050828152602081018484840111156117ea576117e9611776565b5b6117f58482856117ac565b509392505050565b600082601f83011261181257611811611771565b5b81356118228482602086016117bb565b91505092915050565b60008115159050919050565b6118408161182b565b811461184b57600080fd5b50565b60008135905061185d81611837565b92915050565b600060408284031215611879576118786116db565b5b6118836040611751565b9050600082013567ffffffffffffffff8111156118a3576118a261176c565b5b6118af848285016117fd565b60008301525060206118c38482850161184e565b60208301525092915050565b600080604083850312156118e6576118e561169b565b5b60006118f4858286016116c6565b925050602083013567ffffffffffffffff811115611915576119146116a0565b5b61192185828601611863565b9150509250929050565b6000602082840312156119415761194061169b565b5b600061194f848285016116c6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611992578082015181840152602081019050611977565b60008484015250505050565b60006119a982611958565b6119b38185611963565b93506119c3818560208601611974565b6119cc816116e0565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a02826119d7565b9050919050565b611a12816119f7565b82525050565b600060ff82169050919050565b611a2e81611a18565b82525050565b60006060820190508181036000830152611a4e818661199e565b9050611a5d6020830185611a09565b611a6a6040830184611a25565b949350505050565b6000819050919050565b6000611a97611a92611a8d846119d7565b611a72565b6119d7565b9050919050565b6000611aa982611a7c565b9050919050565b6000611abb82611a9e565b9050919050565b611acb81611ab0565b82525050565b6000602082019050611ae66000830184611ac2565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611b1382611aec565b611b1d8185611af7565b9350611b2d818560208601611974565b611b36816116e0565b840191505092915050565b60006020820190508181036000830152611b5b8184611b08565b905092915050565b611b6c816116a5565b82525050565b6000602082019050611b876000830184611b63565b92915050565b611b96816119f7565b8114611ba157600080fd5b50565b600081359050611bb381611b8d565b92915050565b600060208284031215611bcf57611bce61169b565b5b6000611bdd84828501611ba4565b91505092915050565b6000602082019050611bfb6000830184611a09565b92915050565b611c0a81611a18565b8114611c1557600080fd5b50565b600081359050611c2781611c01565b92915050565b600080600060608486031215611c4657611c4561169b565b5b600084013567ffffffffffffffff811115611c6457611c636116a0565b5b611c70868287016117fd565b9350506020611c8186828701611ba4565b9250506040611c9286828701611c18565b9150509250925092565b6000611ca782611a9e565b9050919050565b611cb781611c9c565b82525050565b6000602082019050611cd26000830184611cae565b92915050565b6000819050919050565b611ceb81611cd8565b8114611cf657600080fd5b50565b600081359050611d0881611ce2565b92915050565b60008060408385031215611d2557611d2461169b565b5b6000611d3385828601611cf9565b9250506020611d44858286016116c6565b9150509250929050565b6000604082019050611d636000830185611a09565b611d706020830184611a09565b9392505050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000611dad601383611963565b9150611db882611d77565b602082019050919050565b60006020820190508181036000830152611ddc81611da0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e5957607f821691505b602082108103611e6c57611e6b611e12565b5b50919050565b600081519050611e81816116af565b92915050565b600060208284031215611e9d57611e9c61169b565b5b6000611eab84828501611e72565b91505092915050565b6000604082019050611ec96000830185611a09565b611ed66020830184611b63565b9392505050565b600081519050611eec81611837565b92915050565b600060208284031215611f0857611f0761169b565b5b6000611f1684828501611edd565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611f44565b611f8b8683611f44565b95508019841693508086168417925050509392505050565b6000611fbe611fb9611fb4846116a5565b611a72565b6116a5565b9050919050565b6000819050919050565b611fd883611fa3565b611fec611fe482611fc5565b848454611f51565b825550505050565b600090565b612001611ff4565b61200c818484611fcf565b505050565b5b8181101561203057612025600082611ff9565b600181019050612012565b5050565b601f8211156120755761204681611f1f565b61204f84611f34565b8101602085101561205e578190505b61207261206a85611f34565b830182612011565b50505b505050565b600082821c905092915050565b60006120986000198460080261207a565b1980831691505092915050565b60006120b18383612087565b9150826002028217905092915050565b6120ca82611958565b67ffffffffffffffff8111156120e3576120e26116f1565b5b6120ed8254611e41565b6120f8828285612034565b600060209050601f83116001811461212b5760008415612119578287015190505b61212385826120a5565b86555061218b565b601f19841661213986611f1f565b60005b828110156121615784890151825560018201915060208501945060208101905061213c565b8683101561217e578489015161217a601f891682612087565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b60006121d4600d83612193565b91506121df8261219e565b600d82019050919050565b60006121f5826121c7565b9150819050919050565b61220881611cd8565b82525050565b612217816119f7565b82525050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122528161221d565b82525050565b612261816116a5565b82525050565b600082825260208201905092915050565b600061228382611aec565b61228d8185612267565b935061229d818560208601611974565b6122a6816116e0565b840191505092915050565b600060408301600083015184820360008601526122ce8282612278565b91505060208301516122e36020860182612258565b508091505092915050565b600060a08301600083015161230660008601826121ff565b506020830151612319602086018261220e565b50604083015161232c6040860182612249565b50606083015161233f6060860182612258565b506080830151848203608086015261235782826122b1565b9150508091505092915050565b60006040820190506123796000830185611b63565b818103602083015261238b81846122ee565b90509392505050565b600081905092915050565b60008190508160005260206000209050919050565b600081546123c181611e41565b6123cb8186612394565b945060018216600081146123e657600181146123fb5761242e565b60ff198316865281151582028601935061242e565b6124048561239f565b60005b8381101561242657815481890152600182019150602081019050612407565b838801955050505b50505092915050565b600061244382846123b4565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612488826116a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124ba576124b961244e565b5b600182019050919050565b600060208201905081810360008301526124df818461199e565b905092915050565b60006124f2826116a5565b91506124fd836116a5565b92508282019050808211156125155761251461244e565b5b92915050565b600062ffffff82169050919050565b6125338161251b565b82525050565b612542816119d7565b82525050565b6101008201600082015161255f600085018261220e565b506020820151612572602085018261220e565b506040820151612585604085018261252a565b506060820151612598606085018261220e565b5060808201516125ab6080850182612258565b5060a08201516125be60a0850182612258565b5060c08201516125d160c0850182612258565b5060e08201516125e460e0850182612539565b50505050565b6000610100820190506126006000830184612548565b92915050565b61260f8161182b565b82525050565b600060408201905061262a6000830185611b63565b6126376020830184612606565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115612695578086048111156126715761267061244e565b5b60018516156126805780820291505b808102905061268e8561263e565b9450612655565b94509492505050565b6000826126ae576001905061276a565b816126bc576000905061276a565b81600181146126d257600281146126dc5761270b565b600191505061276a565b60ff8411156126ee576126ed61244e565b5b8360020a9150848211156127055761270461244e565b5b5061276a565b5060208310610133831016604e8410600b84101617156127405782820a90508381111561273b5761273a61244e565b5b61276a565b61274d848484600161264b565b925090508184048111156127645761276361244e565b5b81810290505b9392505050565b600061277c826116a5565b915061278783611a18565b92506127b47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461269e565b905092915050565b60006127c7826116a5565b91506127d2836116a5565b92508282026127e0816116a5565b915082820484148315176127f7576127f661244e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612838826116a5565b9150612843836116a5565b925082612853576128526127fe565b5b828206905092915050565b6000612869826116a5565b9150612874836116a5565b925082820390508181111561288c5761288b61244e565b5b9291505056fea264697066735822122088b33273ff0ea0c32a2aa3d903dfbe242f57a75f1e614773f580908fd0021c4b64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c8063ad5c4648116100a0578063da6868f711610064578063da6868f714610376578063da7f08b8146103b3578063e4f39ccb146103de578063f2fde38b14610409578063fc2a88c3146104325761011f565b8063ad5c46481461028f578063af6c798a146102ba578063b0ff40e7146102f9578063b859b74314610322578063c31c9c071461034b5761011f565b806362747e42116100e757806362747e42146101ce578063715018a6146101f9578063813f0e5a14610210578063894760691461023b5780638da5cb5b146102645761011f565b80630e2c871f1461012457806329c275b61461014d5780633b2bcbf11461018c5780633ccfd60b146101b75761011f565b3661011f57005b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906118cf565b61045d565b005b34801561015957600080fd5b50610174600480360381019061016f919061192b565b610503565b60405161018393929190611a34565b60405180910390f35b34801561019857600080fd5b506101a16106a2565b6040516101ae9190611ad1565b60405180910390f35b3480156101c357600080fd5b506101cc6106c6565b005b3480156101da57600080fd5b506101e361071e565b6040516101f09190611b41565b60405180910390f35b34801561020557600080fd5b5061020e6107ac565b005b34801561021c57600080fd5b506102256107c0565b6040516102329190611b72565b60405180910390f35b34801561024757600080fd5b50610262600480360381019061025d9190611bb9565b6107c6565b005b34801561027057600080fd5b506102796108d0565b6040516102869190611be6565b60405180910390f35b34801561029b57600080fd5b506102a46108fa565b6040516102b19190611be6565b60405180910390f35b3480156102c657600080fd5b506102e160048036038101906102dc919061192b565b61091e565b6040516102f093929190611a34565b60405180910390f35b34801561030557600080fd5b50610320600480360381019061031b919061192b565b610a0d565b005b34801561032e57600080fd5b5061034960048036038101906103449190611c2d565b610a1f565b005b34801561035757600080fd5b50610360610b0b565b60405161036d9190611cbd565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190611d0e565b610b2f565b6040516103aa9190611b72565b60405180910390f35b3480156103bf57600080fd5b506103c8610c3c565b6040516103d59190611b72565b60405180910390f35b3480156103ea57600080fd5b506103f3610c49565b6040516104009190611b72565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190611bb9565b610c4f565b005b34801561043e57600080fd5b50610447610cd5565b6040516104549190611b72565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104f45733816040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104eb929190611d4e565b60405180910390fd5b6104fe8383610cdb565b505050565b6060600080600680549050841061054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054690611dc3565b60405180910390fd5b60006006858154811061056557610564611de3565b5b906000526020600020906002020160405180606001604052908160008201805461058e90611e41565b80601f01602080910402602001604051908101604052809291908181526020018280546105ba90611e41565b80156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151935093509350509193909250565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106ce610cfe565b6106d66108d0565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561071b573d6000803e3d6000fd5b50565b6002805461072b90611e41565b80601f016020809104026020016040519081016040528092919081815260200182805461075790611e41565b80156107a45780601f10610779576101008083540402835291602001916107a4565b820191906000526020600020905b81548152906001019060200180831161078757829003601f168201915b505050505081565b6107b4610cfe565b6107be6000610d85565b565b60055481565b6107ce610cfe565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6107f26108d0565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161082b9190611be6565b602060405180830381865afa158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190611e87565b6040518363ffffffff1660e01b8152600401610889929190611eb4565b6020604051808303816000875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190611ef2565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6006818154811061092e57600080fd5b906000526020600020906002020160009150905080600001805461095190611e41565b80601f016020809104026020016040519081016040528092919081815260200182805461097d90611e41565b80156109ca5780601f1061099f576101008083540402835291602001916109ca565b820191906000526020600020905b8154815290600101906020018083116109ad57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b610a15610cfe565b8060048190555050565b610a27610cfe565b600660405180606001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1681525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610a9b91906120c1565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360ff1602179055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080604051602001610b41906121ea565b6040516020818303038152906040528051906020012090506000610b658583610e4b565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663db750a2d85836040518363ffffffff1660e01b8152600401610bc2929190612364565b6020604051808303816000875af1158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190611e87565b9250827f35627151f04080049c4603628b94879b241dc64b255b7347a7632165d45ee51e60405160405180910390a2505092915050565b6000600680549050905090565b60045481565b610c57610cfe565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cc95760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cc09190611be6565b60405180910390fd5b610cd281610d85565b50565b60035481565b600081600001519050600082602001519050610cf8848383610eb1565b50505050565b610d066114e8565b73ffffffffffffffffffffffffffffffffffffffff16610d246108d0565b73ffffffffffffffffffffffffffffffffffffffff1614610d8357610d476114e8565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d7a9190611be6565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610e5361160a565b610ea9837f000000000000000000000000000000000000000000000000000000000000000060008086815260200190815260200160002060009054906101000a900460e01b846114f0909392919063ffffffff16565b905092915050565b60008060005b600680549050811015610fa057848051906020012060068281548110610ee057610edf611de3565b5b9060005260206000209060020201600001604051610efe9190612437565b604051809103902003610f8d5760068181548110610f1f57610f1e611de3565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060068181548110610f6757610f66611de3565b5b906000526020600020906002020160010160149054906101000a900460ff169150610fa0565b8080610f989061247d565b915050610eb7565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611013577f563ebd046dc43cc5667717e18c14710259a4632f4366792e5cd6cc73181b07e88460405161100491906124c5565b60405180910390a150506114e3565b8215611282577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006004546040518363ffffffff1660e01b8152600401611096929190611eb4565b6020604051808303816000875af11580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d99190611ef2565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001610384426111b191906124e7565b8152602001600454815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b81526004016111fc91906125ea565b6020604051808303816000875af115801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123f9190611e87565b50847ffe937b9910f382875858f98d3eb21489abb83ab3a3c479a2f38f3e22e18a551c6004546001604051611275929190612615565b60405180910390a26114e0565b600081600a6112919190612771565b60055461129e91906127bc565b90508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016112fb929190611eb4565b6020604051808303816000875af115801561131a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133e9190611ef2565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016103844261141691906124e7565b815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b815260040161145f91906125ea565b6020604051808303816000875af115801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a29190611e87565b50857ffe937b9910f382875858f98d3eb21489abb83ab3a3c479a2f38f3e22e18a551c8260006040516114d6929190612615565b60405180910390a2505b50505b505050565b600033905090565b6114f861160a565b61150885608001516101006115a0565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6115a8611677565b60006020836115b7919061282d565b146115e3576020826115c9919061282d565b60206115d5919061285e565b826115e091906124e7565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001611671611677565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6116b8816116a5565b81146116c357600080fd5b50565b6000813590506116d5816116af565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611729826116e0565b810181811067ffffffffffffffff82111715611748576117476116f1565b5b80604052505050565b600061175b611691565b90506117678282611720565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611796576117956116f1565b5b61179f826116e0565b9050602081019050919050565b82818337600083830152505050565b60006117ce6117c98461177b565b611751565b9050828152602081018484840111156117ea576117e9611776565b5b6117f58482856117ac565b509392505050565b600082601f83011261181257611811611771565b5b81356118228482602086016117bb565b91505092915050565b60008115159050919050565b6118408161182b565b811461184b57600080fd5b50565b60008135905061185d81611837565b92915050565b600060408284031215611879576118786116db565b5b6118836040611751565b9050600082013567ffffffffffffffff8111156118a3576118a261176c565b5b6118af848285016117fd565b60008301525060206118c38482850161184e565b60208301525092915050565b600080604083850312156118e6576118e561169b565b5b60006118f4858286016116c6565b925050602083013567ffffffffffffffff811115611915576119146116a0565b5b61192185828601611863565b9150509250929050565b6000602082840312156119415761194061169b565b5b600061194f848285016116c6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611992578082015181840152602081019050611977565b60008484015250505050565b60006119a982611958565b6119b38185611963565b93506119c3818560208601611974565b6119cc816116e0565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a02826119d7565b9050919050565b611a12816119f7565b82525050565b600060ff82169050919050565b611a2e81611a18565b82525050565b60006060820190508181036000830152611a4e818661199e565b9050611a5d6020830185611a09565b611a6a6040830184611a25565b949350505050565b6000819050919050565b6000611a97611a92611a8d846119d7565b611a72565b6119d7565b9050919050565b6000611aa982611a7c565b9050919050565b6000611abb82611a9e565b9050919050565b611acb81611ab0565b82525050565b6000602082019050611ae66000830184611ac2565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611b1382611aec565b611b1d8185611af7565b9350611b2d818560208601611974565b611b36816116e0565b840191505092915050565b60006020820190508181036000830152611b5b8184611b08565b905092915050565b611b6c816116a5565b82525050565b6000602082019050611b876000830184611b63565b92915050565b611b96816119f7565b8114611ba157600080fd5b50565b600081359050611bb381611b8d565b92915050565b600060208284031215611bcf57611bce61169b565b5b6000611bdd84828501611ba4565b91505092915050565b6000602082019050611bfb6000830184611a09565b92915050565b611c0a81611a18565b8114611c1557600080fd5b50565b600081359050611c2781611c01565b92915050565b600080600060608486031215611c4657611c4561169b565b5b600084013567ffffffffffffffff811115611c6457611c636116a0565b5b611c70868287016117fd565b9350506020611c8186828701611ba4565b9250506040611c9286828701611c18565b9150509250925092565b6000611ca782611a9e565b9050919050565b611cb781611c9c565b82525050565b6000602082019050611cd26000830184611cae565b92915050565b6000819050919050565b611ceb81611cd8565b8114611cf657600080fd5b50565b600081359050611d0881611ce2565b92915050565b60008060408385031215611d2557611d2461169b565b5b6000611d3385828601611cf9565b9250506020611d44858286016116c6565b9150509250929050565b6000604082019050611d636000830185611a09565b611d706020830184611a09565b9392505050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000611dad601383611963565b9150611db882611d77565b602082019050919050565b60006020820190508181036000830152611ddc81611da0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e5957607f821691505b602082108103611e6c57611e6b611e12565b5b50919050565b600081519050611e81816116af565b92915050565b600060208284031215611e9d57611e9c61169b565b5b6000611eab84828501611e72565b91505092915050565b6000604082019050611ec96000830185611a09565b611ed66020830184611b63565b9392505050565b600081519050611eec81611837565b92915050565b600060208284031215611f0857611f0761169b565b5b6000611f1684828501611edd565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611f44565b611f8b8683611f44565b95508019841693508086168417925050509392505050565b6000611fbe611fb9611fb4846116a5565b611a72565b6116a5565b9050919050565b6000819050919050565b611fd883611fa3565b611fec611fe482611fc5565b848454611f51565b825550505050565b600090565b612001611ff4565b61200c818484611fcf565b505050565b5b8181101561203057612025600082611ff9565b600181019050612012565b5050565b601f8211156120755761204681611f1f565b61204f84611f34565b8101602085101561205e578190505b61207261206a85611f34565b830182612011565b50505b505050565b600082821c905092915050565b60006120986000198460080261207a565b1980831691505092915050565b60006120b18383612087565b9150826002028217905092915050565b6120ca82611958565b67ffffffffffffffff8111156120e3576120e26116f1565b5b6120ed8254611e41565b6120f8828285612034565b600060209050601f83116001811461212b5760008415612119578287015190505b61212385826120a5565b86555061218b565b601f19841661213986611f1f565b60005b828110156121615784890151825560018201915060208501945060208101905061213c565b8683101561217e578489015161217a601f891682612087565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b60006121d4600d83612193565b91506121df8261219e565b600d82019050919050565b60006121f5826121c7565b9150819050919050565b61220881611cd8565b82525050565b612217816119f7565b82525050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122528161221d565b82525050565b612261816116a5565b82525050565b600082825260208201905092915050565b600061228382611aec565b61228d8185612267565b935061229d818560208601611974565b6122a6816116e0565b840191505092915050565b600060408301600083015184820360008601526122ce8282612278565b91505060208301516122e36020860182612258565b508091505092915050565b600060a08301600083015161230660008601826121ff565b506020830151612319602086018261220e565b50604083015161232c6040860182612249565b50606083015161233f6060860182612258565b506080830151848203608086015261235782826122b1565b9150508091505092915050565b60006040820190506123796000830185611b63565b818103602083015261238b81846122ee565b90509392505050565b600081905092915050565b60008190508160005260206000209050919050565b600081546123c181611e41565b6123cb8186612394565b945060018216600081146123e657600181146123fb5761242e565b60ff198316865281151582028601935061242e565b6124048561239f565b60005b8381101561242657815481890152600182019150602081019050612407565b838801955050505b50505092915050565b600061244382846123b4565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612488826116a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124ba576124b961244e565b5b600182019050919050565b600060208201905081810360008301526124df818461199e565b905092915050565b60006124f2826116a5565b91506124fd836116a5565b92508282019050808211156125155761251461244e565b5b92915050565b600062ffffff82169050919050565b6125338161251b565b82525050565b612542816119d7565b82525050565b6101008201600082015161255f600085018261220e565b506020820151612572602085018261220e565b506040820151612585604085018261252a565b506060820151612598606085018261220e565b5060808201516125ab6080850182612258565b5060a08201516125be60a0850182612258565b5060c08201516125d160c0850182612258565b5060e08201516125e460e0850182612539565b50505050565b6000610100820190506126006000830184612548565b92915050565b61260f8161182b565b82525050565b600060408201905061262a6000830185611b63565b6126376020830184612606565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115612695578086048111156126715761267061244e565b5b60018516156126805780820291505b808102905061268e8561263e565b9450612655565b94509492505050565b6000826126ae576001905061276a565b816126bc576000905061276a565b81600181146126d257600281146126dc5761270b565b600191505061276a565b60ff8411156126ee576126ed61244e565b5b8360020a9150848211156127055761270461244e565b5b5061276a565b5060208310610133831016604e8410600b84101617156127405782820a90508381111561273b5761273a61244e565b5b61276a565b61274d848484600161264b565b925090508184048111156127645761276361244e565b5b81810290505b9392505050565b600061277c826116a5565b915061278783611a18565b92506127b47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461269e565b905092915050565b60006127c7826116a5565b91506127d2836116a5565b92508282026127e0816116a5565b915082820484148315176127f7576127f661244e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612838826116a5565b9150612843836116a5565b925082612853576128526127fe565b5b828206905092915050565b6000612869826116a5565b9150612874836116a5565b925082820390508181111561288c5761288b61244e565b5b9291505056fea264697066735822122088b33273ff0ea0c32a2aa3d903dfbe242f57a75f1e614773f580908fd0021c4b64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addMemeCoin(string,address,uint8)": {
        "params": {
          "addr": "The contract address of the memecoin",
          "decimals": "The decimals of the memecoin",
          "name": "The name of the memecoin"
        }
      },
      "getMemeCoin(uint256)": {
        "params": {
          "index": "The index in the memecoins array"
        },
        "returns": {
          "addr": "The memecoin contract address",
          "decimals": "The decimals of the memecoin",
          "name": "The memecoin name"
        }
      },
      "getMemeCoinCount()": {
        "returns": {
          "_0": "The length of the memecoins array"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMemeCoin(string,address,uint8)": {
        "notice": "Add a new memecoin to the list"
      },
      "getMemeCoin(uint256)": {
        "notice": "Get a memecoin by index"
      },
      "getMemeCoinCount()": {
        "notice": "Get the total number of memecoins in the list"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 417,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "sTypeIdToFunctionSelector",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes4)"
      },
      {
        "astId": 8,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2052,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "lastResponse",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2054,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2057,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "wethAmountForTrade",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2060,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "memeCoinAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2071,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "memeCoins",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(MemeCoin)2067_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MemeCoin)2067_storage)dyn_storage": {
        "base": "t_struct(MemeCoin)2067_storage",
        "encoding": "dynamic_array",
        "label": "struct MockTradeMemeCoin.MemeCoin[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MemeCoin)2067_storage": {
        "encoding": "inplace",
        "label": "struct MockTradeMemeCoin.MemeCoin",
        "members": [
          {
            "astId": 2062,
            "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2064,
            "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2066,
            "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
            "label": "decimals",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}