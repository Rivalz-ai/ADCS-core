{
  "address": "0xE6b3360ADb38e6f12Ed393e5151228074ceAD630",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "DataFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DataRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        }
      ],
      "name": "MemecoinNotFound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        }
      ],
      "name": "TradeSuccess",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract IADCSCoordinator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "addMemeCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMemeCoin",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMemeCoinCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memeCoinAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "memeCoins",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "response",
              "type": "bool"
            }
          ],
          "internalType": "struct ADCSConsumerBase.StringAndBool",
          "name": "response",
          "type": "tuple"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "jobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "requestTradeMemeCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setWethAmountForTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "tradeMemeCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAmountForTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3494f7f630971af0b3b2bbc9db2e39a84f80e789a3024573f2d52a2dea7f688f",
  "receipt": {
    "to": null,
    "from": "0x8b736035BbDA71825e0219f5FE4DfB22C35FbDDC",
    "contractAddress": "0xE6b3360ADb38e6f12Ed393e5151228074ceAD630",
    "transactionIndex": 8,
    "gasUsed": "3832868",
    "logsBloom": "0x
    "blockHash": "0x116907b90351aa79f68796719f85d49fd1327254735f8dc4db451b01ca1dbc70",
    "transactionHash": "0x3494f7f630971af0b3b2bbc9db2e39a84f80e789a3024573f2d52a2dea7f688f",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 273746429,
        "transactionHash": "0x3494f7f630971af0b3b2bbc9db2e39a84f80e789a3024573f2d52a2dea7f688f",
        "address": "0xE6b3360ADb38e6f12Ed393e5151228074ceAD630",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b736035bbda71825e0219f5fe4dfb22c35fbddc"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x116907b90351aa79f68796719f85d49fd1327254735f8dc4db451b01ca1dbc70"
      }
    ],
    "blockNumber": 273746429,
    "cumulativeGasUsed": "5790038",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDD2631147BD866D588aA99E6B06Dc1633b6646D8",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 12,
  "solcInputHash": "b777d1c1c30973fa3c5a2fd7c9fed1e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"DataFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"MemecoinNotFound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"TradeSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IADCSCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"addMemeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMemeCoin\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMemeCoinCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memeCoinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memeCoins\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"internalType\":\"struct ADCSConsumerBase.StringAndBool\",\"name\":\"response\",\"type\":\"tuple\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestTradeMemeCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWethAmountForTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"tradeMemeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAmountForTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addMemeCoin(string,address,uint8)\":{\"params\":{\"addr\":\"The contract address of the memecoin\",\"decimals\":\"The decimals of the memecoin\",\"name\":\"The name of the memecoin\"}},\"getMemeCoin(uint256)\":{\"params\":{\"index\":\"The index in the memecoins array\"},\"returns\":{\"addr\":\"The memecoin contract address\",\"decimals\":\"The decimals of the memecoin\",\"name\":\"The memecoin name\"}},\"getMemeCoinCount()\":{\"returns\":{\"_0\":\"The length of the memecoins array\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMemeCoin(string,address,uint8)\":{\"notice\":\"Add a new memecoin to the list\"},\"getMemeCoin(uint256)\":{\"notice\":\"Get a memecoin by index\"},\"getMemeCoinCount()\":{\"notice\":\"Get the total number of memecoins in the list\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mock/MockTradeMemeCoin.sol\":\"MockTradeMemeCoin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"src/ADCSConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IADCSCoordinator.sol\\\";\\n\\nabstract contract ADCSConsumerBase {\\n    using ADCS for ADCS.Request;\\n\\n    struct StringAndBool {\\n        string name;\\n        bool response;\\n    }\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    mapping(bytes32 => bytes4) private sTypeIdToFunctionSelector;\\n    IADCSCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _adcsResponseCoordinator address of ADCSCoordinator contract\\n     */\\n    constructor(address _adcsResponseCoordinator) {\\n        COORDINATOR = IADCSCoordinator(_adcsResponseCoordinator);\\n\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint256\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint256\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n\\n        sTypeIdToFunctionSelector[keccak256(abi.encodePacked(\\\"stringAndbool\\\"))] = COORDINATOR\\n            .fulfillDataRequestStringAndBool\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @param typeId the reponse type ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(\\n        bytes32 jobId,\\n        bytes32 typeId\\n    ) internal view returns (ADCS.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sTypeIdToFunctionSelector[typeId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa1030108fcef4a9ed262e889c3110a0de6c67a6a6d5cc344914ec082935c9909\",\"license\":\"MIT\"},\"src/ADCSConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ADCSConsumerBase.sol\\\";\\n\\nabstract contract ADCSConsumerFulfillUint256 is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBool is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBytes32 is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillBytes is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract ADCSConsumerFulfillStringAndBool is ADCSConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, StringAndBool memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        StringAndBool memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x83a0b1eb7cd2681fc73b9f30c6235e90601c390dec59623768ffd25310a85b6b\",\"license\":\"MIT\"},\"src/interfaces/IADCSCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IADCSCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IADCSCoordinator is IADCSCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x675f3774f7561f7d2f74f9dac020bad81154f1bba3af7d4c22e57e595a9e7769\",\"license\":\"MIT\"},\"src/interfaces/IADCSCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/ADCS.sol\\\";\\n\\ninterface IADCSCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bytes32 jobId;\\n    }\\n\\n    struct StringAndBool {\\n        string name;\\n        bool response;\\n    }\\n\\n    function requestData(\\n        uint32 callbackGasLimit,\\n        ADCS.Request memory req\\n    ) external returns (uint256);\\n\\n    function fulfillDataRequestUint256(\\n        uint256 requestId,\\n        uint256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestStringAndBool(\\n        uint256 requestId,\\n        StringAndBool memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7391cdf3b7ec2b12a112e1b4d68677827b3eb40f2846dd54b3246998f8c6cf55\",\"license\":\"MIT\"},\"src/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     */\\n    function setConfig(uint32 maxGasLimit, uint32 gasAfterPaymentCalculation) external;\\n\\n    function pendingRequestExists(address consumer, uint64 nonce) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n}\\n\",\"keccak256\":\"0x2cce5a34fc50282f7c1a8340ef18c50b8e9785f01d63f3ac9d02a985d7ae603a\",\"license\":\"MIT\"},\"src/libraries/ADCS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary ADCS {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (ADCS.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0x5c143d8c51913e10b156ad7f83a6b58b905b68c7b6aaa68982cd4ba60eb8d6c2\",\"license\":\"MIT\"},\"src/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x974280a1114bec25110c9c608e1c6c4dd7666c00e30f831f68b6d8a5b3bde420\",\"license\":\"MIT\"},\"src/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/mock/MockTradeMemeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ADCSConsumerFulfill.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MockTradeMemeCoin is ADCSConsumerFulfillStringAndBool, Ownable {\\n    using ADCS for ADCS.Request;\\n\\n    // Store the last received response for testing\\n    bytes public lastResponse;\\n    uint256 public lastRequestId;\\n    uint256 public wethAmountForTrade = 1000000000000000; // 0.001 WETH\\n    uint256 public memeCoinAmount = 100; // 100 memecoin\\n\\n    struct MemeCoin {\\n        string name;\\n        address addr;\\n        uint8 decimals;\\n    }\\n\\n    MemeCoin[] public memeCoins;\\n\\n    event DataRequested(uint256 indexed requestId);\\n    event DataFulfilled(uint256 indexed requestId, bytes response);\\n    event MemecoinNotFound(string tokenName);\\n    event TradeSuccess(uint256 indexed requestId, uint256 amountIn, bool isBuy);\\n\\n    address public immutable WETH;\\n    ISwapRouter public immutable swapRouter;\\n\\n    constructor(\\n        address _coordinator,\\n        address _weth,\\n        address _swapRouter\\n    ) ADCSConsumerBase(_coordinator) Ownable(msg.sender) {\\n        WETH = _weth;\\n        swapRouter = ISwapRouter(_swapRouter);\\n    }\\n\\n    function setWethAmountForTrade(uint256 amount) external onlyOwner {\\n        wethAmountForTrade = amount;\\n    }\\n\\n    /**\\n     * @notice Add a new memecoin to the list\\n     * @param name The name of the memecoin\\n     * @param addr The contract address of the memecoin\\n     * @param decimals The decimals of the memecoin\\n     */\\n    function addMemeCoin(string memory name, address addr, uint8 decimals) external onlyOwner {\\n        memeCoins.push(MemeCoin({name: name, addr: addr, decimals: decimals}));\\n    }\\n\\n    /**\\n     * @notice Get the total number of memecoins in the list\\n     * @return The length of the memecoins array\\n     */\\n    function getMemeCoinCount() external view returns (uint256) {\\n        return memeCoins.length;\\n    }\\n\\n    /**\\n     * @notice Get a memecoin by index\\n     * @param index The index in the memecoins array\\n     * @return name The memecoin name\\n     * @return addr The memecoin contract address\\n     * @return decimals The decimals of the memecoin\\n     */\\n    function getMemeCoin(\\n        uint256 index\\n    ) external view returns (string memory name, address addr, uint8 decimals) {\\n        require(index < memeCoins.length, \\\"Index out of bounds\\\");\\n        MemeCoin memory coin = memeCoins[index];\\n        return (coin.name, coin.addr, coin.decimals);\\n    }\\n\\n    // Function to request bytes data\\n    function requestTradeMemeCoin(\\n        bytes32 jobId,\\n        uint32 callbackGasLimit\\n    ) external onlyOwner returns (uint256 requestId) {\\n        bytes32 typeId = keccak256(abi.encodePacked(\\\"stringAndbool\\\"));\\n        ADCS.Request memory req = buildRequest(jobId, typeId);\\n        requestId = COORDINATOR.requestData(callbackGasLimit, req);\\n        emit DataRequested(requestId);\\n        return requestId;\\n    }\\n\\n    function fulfillDataRequest(\\n        uint256 requestId,\\n        StringAndBool memory response\\n    ) internal virtual override {\\n        string memory tokenName = response.name;\\n        bool result = response.response;\\n        // Find memecoin address and decimals by name\\n        tradeMemeCoin(requestId, tokenName, result);\\n    }\\n\\n    function tradeMemeCoin(\\n        uint256 requestId,\\n        string memory tokenName,\\n        bool result\\n    ) public onlyOwner {\\n        // Find memecoin address and decimals by name\\n        address memeTokenAddress;\\n        uint8 tokenDecimals;\\n        for (uint i = 0; i < memeCoins.length; i++) {\\n            if (keccak256(bytes(memeCoins[i].name)) == keccak256(bytes(tokenName))) {\\n                memeTokenAddress = memeCoins[i].addr;\\n                tokenDecimals = memeCoins[i].decimals;\\n                break;\\n            }\\n        }\\n        if (memeTokenAddress == address(0)) {\\n            emit MemecoinNotFound(tokenName);\\n            return;\\n        }\\n\\n        // Execute trade through Uniswap V3\\n        if (result) {\\n            // buy memecoin with eth\\n            IERC20(WETH).approve(address(swapRouter), wethAmountForTrade);\\n            swapRouter.exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: WETH,\\n                    tokenOut: memeTokenAddress,\\n                    fee: 3000,\\n                    recipient: address(this),\\n                    deadline: block.timestamp + 15 minutes,\\n                    amountIn: wethAmountForTrade,\\n                    amountOutMinimum: 0,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n\\n            emit TradeSuccess(requestId, wethAmountForTrade, true);\\n        } else {\\n            // sell memecoin for eth\\n            // First approve router to spend our tokens\\n            uint256 memeCoinAmountInWei = memeCoinAmount * (10 ** tokenDecimals);\\n            IERC20(memeTokenAddress).approve(address(swapRouter), memeCoinAmountInWei);\\n\\n            swapRouter.exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: memeTokenAddress, // memecoin token\\n                    tokenOut: WETH, // eth\\n                    fee: 3000, // 0.3% fee tier\\n                    recipient: address(this),\\n                    deadline: block.timestamp + 15 minutes,\\n                    amountIn: memeCoinAmountInWei,\\n                    amountOutMinimum: 0, // Set minimum amount out to 0 (should use proper slippage in production)\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n            emit TradeSuccess(requestId, memeCoinAmountInWei, false);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function withdrawToken(address token) external onlyOwner {\\n        IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xe64e8725e902c1f6e983e9faf45d16d101c5288d9c1cd33ddea5e7898f08b493\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405266038d7ea4c6800060045560646005553480156200002157600080fd5b50604051620031423803806200314283398181016040528101906200004791906200046d565b33838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505063ba9ecc9760e01b600080604051602001620000999062000524565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555063f8795e1060e01b600080604051602001620000f4906200058b565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055506313ab866360e01b6000806040516020016200014f90620005f2565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055506364d98f3660e01b600080604051602001620001aa9062000659565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555063de89dd5360e01b6000806040516020016200020590620006c0565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620002ba5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620002b19190620006e8565b60405180910390fd5b620002cb816200033d60201b60201c565b508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000705565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004358262000408565b9050919050565b620004478162000428565b81146200045357600080fd5b50565b60008151905062000467816200043c565b92915050565b60008060006060848603121562000489576200048862000403565b5b6000620004998682870162000456565b9350506020620004ac8682870162000456565b9250506040620004bf8682870162000456565b9150509250925092565b600081905092915050565b7f75696e7432353600000000000000000000000000000000000000000000000000600082015250565b60006200050c600783620004c9565b91506200051982620004d4565b600782019050919050565b60006200053182620004fd565b9150819050919050565b7f626f6f6c00000000000000000000000000000000000000000000000000000000600082015250565b600062000573600483620004c9565b915062000580826200053b565b600482019050919050565b6000620005988262000564565b9150819050919050565b7f6279746573333200000000000000000000000000000000000000000000000000600082015250565b6000620005da600783620004c9565b9150620005e782620005a2565b600782019050919050565b6000620005ff82620005cb565b9150819050919050565b7f6279746573000000000000000000000000000000000000000000000000000000600082015250565b600062000641600583620004c9565b91506200064e8262000609565b600582019050919050565b6000620006668262000632565b9150819050919050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b6000620006a8600d83620004c9565b9150620006b58262000670565b600d82019050919050565b6000620006cd8262000699565b9150819050919050565b620006e28162000428565b82525050565b6000602082019050620006ff6000830184620006d7565b92915050565b60805160a05160c0516129c76200077b600039600081816109000152818161098501528181610b6701528181610bea01526112960152600081816108c4015281816109cd01528181610c4e0152611085015260008181610495015281816106d801528181610e7601526114d501526129c76000f3fe6080604052600436106101235760003560e01c80638da5cb5b116100a0578063c31c9c0711610064578063c31c9c07146103bc578063da7f08b8146103e7578063e4f39ccb14610412578063f2fde38b1461043d578063fc2a88c3146104665761012a565b80638da5cb5b146102d5578063ad5c464814610300578063af6c798a1461032b578063b0ff40e71461036a578063b859b743146103935761012a565b806362747e42116100e757806362747e4214610202578063715018a61461022d578063747b731614610244578063813f0e5a1461028157806389476069146102ac5761012a565b80630e2c871f1461012f57806329c275b6146101585780633b2bcbf1146101975780633ccfd60b146101c25780634f8338fa146101d95761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190611914565b610491565b005b34801561016457600080fd5b5061017f600480360381019061017a9190611970565b610537565b60405161018e93929190611a79565b60405180910390f35b3480156101a357600080fd5b506101ac6106d6565b6040516101b99190611b16565b60405180910390f35b3480156101ce57600080fd5b506101d76106fa565b005b3480156101e557600080fd5b5061020060048036038101906101fb9190611b31565b610752565b005b34801561020e57600080fd5b50610217610d91565b6040516102249190611bf5565b60405180910390f35b34801561023957600080fd5b50610242610e1f565b005b34801561025057600080fd5b5061026b60048036038101906102669190611c89565b610e33565b6040516102789190611cd8565b60405180910390f35b34801561028d57600080fd5b50610296610f49565b6040516102a39190611cd8565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190611d1f565b610f4f565b005b3480156102e157600080fd5b506102ea611059565b6040516102f79190611d4c565b60405180910390f35b34801561030c57600080fd5b50610315611083565b6040516103229190611d4c565b60405180910390f35b34801561033757600080fd5b50610352600480360381019061034d9190611970565b6110a7565b60405161036193929190611a79565b60405180910390f35b34801561037657600080fd5b50610391600480360381019061038c9190611970565b611196565b005b34801561039f57600080fd5b506103ba60048036038101906103b59190611d93565b6111a8565b005b3480156103c857600080fd5b506103d1611294565b6040516103de9190611e23565b60405180910390f35b3480156103f357600080fd5b506103fc6112b8565b6040516104099190611cd8565b60405180910390f35b34801561041e57600080fd5b506104276112c5565b6040516104349190611cd8565b60405180910390f35b34801561044957600080fd5b50610464600480360381019061045f9190611d1f565b6112cb565b005b34801561047257600080fd5b5061047b611351565b6040516104889190611cd8565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105285733816040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161051f929190611e3e565b60405180910390fd5b6105328383611357565b505050565b60606000806006805490508410610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90611eb3565b60405180910390fd5b60006006858154811061059957610598611ed3565b5b90600052602060002090600202016040518060600160405290816000820180546105c290611f31565b80601f01602080910402602001604051908101604052809291908181526020018280546105ee90611f31565b801561063b5780601f106106105761010080835404028352916020019161063b565b820191906000526020600020905b81548152906001019060200180831161061e57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151935093509350509193909250565b7f000000000000000000000000000000000000000000000000000000000000000081565b61070261137a565b61070a611059565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561074f573d6000803e3d6000fd5b50565b61075a61137a565b60008060005b6006805490508110156108495784805190602001206006828154811061078957610788611ed3565b5b90600052602060002090600202016000016040516107a79190612005565b60405180910390200361083657600681815481106107c8576107c7611ed3565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600681815481106108105761080f611ed3565b5b906000526020600020906002020160010160149054906101000a900460ff169150610849565b80806108419061204b565b915050610760565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108bc577f563ebd046dc43cc5667717e18c14710259a4632f4366792e5cd6cc73181b07e8846040516108ad9190612093565b60405180910390a15050610d8c565b8215610b2b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006004546040518363ffffffff1660e01b815260040161093f9291906120b5565b6020604051808303816000875af115801561095e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098291906120f3565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200161038442610a5a9190612120565b8152602001600454815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610aa59190612241565b6020604051808303816000875af1158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190612272565b50847ffe937b9910f382875858f98d3eb21489abb83ab3a3c479a2f38f3e22e18a551c6004546001604051610b1e9291906122ae565b60405180910390a2610d89565b600081600a610b3a919061240a565b600554610b479190612455565b90508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610ba49291906120b5565b6020604051808303816000875af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be791906120f3565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200161038442610cbf9190612120565b815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610d089190612241565b6020604051808303816000875af1158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190612272565b50857ffe937b9910f382875858f98d3eb21489abb83ab3a3c479a2f38f3e22e18a551c826000604051610d7f9291906122ae565b60405180910390a2505b50505b505050565b60028054610d9e90611f31565b80601f0160208091040260200160405190810160405280929190818152602001828054610dca90611f31565b8015610e175780601f10610dec57610100808354040283529160200191610e17565b820191906000526020600020905b815481529060010190602001808311610dfa57829003601f168201915b505050505081565b610e2761137a565b610e316000611401565b565b6000610e3d61137a565b6000604051602001610e4e906124ee565b6040516020818303038152906040528051906020012090506000610e7285836114c7565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f85836040518363ffffffff1660e01b8152600401610ecf929190612659565b6020604051808303816000875af1158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f129190612272565b9250827f35627151f04080049c4603628b94879b241dc64b255b7347a7632165d45ee51e60405160405180910390a2505092915050565b60055481565b610f5761137a565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610f7b611059565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fb49190611d4c565b602060405180830381865afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190612272565b6040518363ffffffff1660e01b81526004016110129291906120b5565b6020604051808303816000875af1158015611031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105591906120f3565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600681815481106110b757600080fd5b90600052602060002090600202016000915090508060000180546110da90611f31565b80601f016020809104026020016040519081016040528092919081815260200182805461110690611f31565b80156111535780601f1061112857610100808354040283529160200191611153565b820191906000526020600020905b81548152906001019060200180831161113657829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b61119e61137a565b8060048190555050565b6111b061137a565b600660405180606001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1681525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081611224919061282b565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360ff1602179055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600680549050905090565b60045481565b6112d361137a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113455760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161133c9190611d4c565b60405180910390fd5b61134e81611401565b50565b60035481565b600081600001519050600082602001519050611374848383610752565b50505050565b61138261152d565b73ffffffffffffffffffffffffffffffffffffffff166113a0611059565b73ffffffffffffffffffffffffffffffffffffffff16146113ff576113c361152d565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016113f69190611d4c565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6114cf61164f565b611525837f000000000000000000000000000000000000000000000000000000000000000060008086815260200190815260200160002060009054906101000a900460e01b84611535909392919063ffffffff16565b905092915050565b600033905090565b61153d61164f565b61154d85608001516101006115e5565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6115ed6116bc565b60006020836115fc919061292c565b146116285760208261160e919061292c565b602061161a919061295d565b826116259190612120565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600081526020016116b66116bc565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6116fd816116ea565b811461170857600080fd5b50565b60008135905061171a816116f4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61176e82611725565b810181811067ffffffffffffffff8211171561178d5761178c611736565b5b80604052505050565b60006117a06116d6565b90506117ac8282611765565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156117db576117da611736565b5b6117e482611725565b9050602081019050919050565b82818337600083830152505050565b600061181361180e846117c0565b611796565b90508281526020810184848401111561182f5761182e6117bb565b5b61183a8482856117f1565b509392505050565b600082601f830112611857576118566117b6565b5b8135611867848260208601611800565b91505092915050565b60008115159050919050565b61188581611870565b811461189057600080fd5b50565b6000813590506118a28161187c565b92915050565b6000604082840312156118be576118bd611720565b5b6118c86040611796565b9050600082013567ffffffffffffffff8111156118e8576118e76117b1565b5b6118f484828501611842565b600083015250602061190884828501611893565b60208301525092915050565b6000806040838503121561192b5761192a6116e0565b5b60006119398582860161170b565b925050602083013567ffffffffffffffff81111561195a576119596116e5565b5b611966858286016118a8565b9150509250929050565b600060208284031215611986576119856116e0565b5b60006119948482850161170b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119d75780820151818401526020810190506119bc565b60008484015250505050565b60006119ee8261199d565b6119f881856119a8565b9350611a088185602086016119b9565b611a1181611725565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4782611a1c565b9050919050565b611a5781611a3c565b82525050565b600060ff82169050919050565b611a7381611a5d565b82525050565b60006060820190508181036000830152611a9381866119e3565b9050611aa26020830185611a4e565b611aaf6040830184611a6a565b949350505050565b6000819050919050565b6000611adc611ad7611ad284611a1c565b611ab7565b611a1c565b9050919050565b6000611aee82611ac1565b9050919050565b6000611b0082611ae3565b9050919050565b611b1081611af5565b82525050565b6000602082019050611b2b6000830184611b07565b92915050565b600080600060608486031215611b4a57611b496116e0565b5b6000611b588682870161170b565b935050602084013567ffffffffffffffff811115611b7957611b786116e5565b5b611b8586828701611842565b9250506040611b9686828701611893565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000611bc782611ba0565b611bd18185611bab565b9350611be18185602086016119b9565b611bea81611725565b840191505092915050565b60006020820190508181036000830152611c0f8184611bbc565b905092915050565b6000819050919050565b611c2a81611c17565b8114611c3557600080fd5b50565b600081359050611c4781611c21565b92915050565b600063ffffffff82169050919050565b611c6681611c4d565b8114611c7157600080fd5b50565b600081359050611c8381611c5d565b92915050565b60008060408385031215611ca057611c9f6116e0565b5b6000611cae85828601611c38565b9250506020611cbf85828601611c74565b9150509250929050565b611cd2816116ea565b82525050565b6000602082019050611ced6000830184611cc9565b92915050565b611cfc81611a3c565b8114611d0757600080fd5b50565b600081359050611d1981611cf3565b92915050565b600060208284031215611d3557611d346116e0565b5b6000611d4384828501611d0a565b91505092915050565b6000602082019050611d616000830184611a4e565b92915050565b611d7081611a5d565b8114611d7b57600080fd5b50565b600081359050611d8d81611d67565b92915050565b600080600060608486031215611dac57611dab6116e0565b5b600084013567ffffffffffffffff811115611dca57611dc96116e5565b5b611dd686828701611842565b9350506020611de786828701611d0a565b9250506040611df886828701611d7e565b9150509250925092565b6000611e0d82611ae3565b9050919050565b611e1d81611e02565b82525050565b6000602082019050611e386000830184611e14565b92915050565b6000604082019050611e536000830185611a4e565b611e606020830184611a4e565b9392505050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000611e9d6013836119a8565b9150611ea882611e67565b602082019050919050565b60006020820190508181036000830152611ecc81611e90565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f4957607f821691505b602082108103611f5c57611f5b611f02565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154611f8f81611f31565b611f998186611f62565b94506001821660008114611fb45760018114611fc957611ffc565b60ff1983168652811515820286019350611ffc565b611fd285611f6d565b60005b83811015611ff457815481890152600182019150602081019050611fd5565b838801955050505b50505092915050565b60006120118284611f82565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612056826116ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120885761208761201c565b5b600182019050919050565b600060208201905081810360008301526120ad81846119e3565b905092915050565b60006040820190506120ca6000830185611a4e565b6120d76020830184611cc9565b9392505050565b6000815190506120ed8161187c565b92915050565b600060208284031215612109576121086116e0565b5b6000612117848285016120de565b91505092915050565b600061212b826116ea565b9150612136836116ea565b925082820190508082111561214e5761214d61201c565b5b92915050565b61215d81611a3c565b82525050565b600062ffffff82169050919050565b61217b81612163565b82525050565b61218a816116ea565b82525050565b61219981611a1c565b82525050565b610100820160008201516121b66000850182612154565b5060208201516121c96020850182612154565b5060408201516121dc6040850182612172565b5060608201516121ef6060850182612154565b5060808201516122026080850182612181565b5060a082015161221560a0850182612181565b5060c082015161222860c0850182612181565b5060e082015161223b60e0850182612190565b50505050565b600061010082019050612257600083018461219f565b92915050565b60008151905061226c816116f4565b92915050565b600060208284031215612288576122876116e0565b5b60006122968482850161225d565b91505092915050565b6122a881611870565b82525050565b60006040820190506122c36000830185611cc9565b6122d0602083018461229f565b9392505050565b60008160011c9050919050565b6000808291508390505b600185111561232e5780860481111561230a5761230961201c565b5b60018516156123195780820291505b8081029050612327856122d7565b94506122ee565b94509492505050565b6000826123475760019050612403565b816123555760009050612403565b816001811461236b5760028114612375576123a4565b6001915050612403565b60ff8411156123875761238661201c565b5b8360020a91508482111561239e5761239d61201c565b5b50612403565b5060208310610133831016604e8410600b84101617156123d95782820a9050838111156123d4576123d361201c565b5b612403565b6123e684848460016122e4565b925090508184048111156123fd576123fc61201c565b5b81810290505b9392505050565b6000612415826116ea565b915061242083611a5d565b925061244d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612337565b905092915050565b6000612460826116ea565b915061246b836116ea565b9250828202612479816116ea565b915082820484148315176124905761248f61201c565b5b5092915050565b600081905092915050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b60006124d8600d83612497565b91506124e3826124a2565b600d82019050919050565b60006124f9826124cb565b9150819050919050565b61250c81611c4d565b82525050565b61251b81611c17565b82525050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61255681612521565b82525050565b600082825260208201905092915050565b600061257882611ba0565b612582818561255c565b93506125928185602086016119b9565b61259b81611725565b840191505092915050565b600060408301600083015184820360008601526125c3828261256d565b91505060208301516125d86020860182612181565b508091505092915050565b600060a0830160008301516125fb6000860182612512565b50602083015161260e6020860182612154565b506040830151612621604086018261254d565b5060608301516126346060860182612181565b506080830151848203608086015261264c82826125a6565b9150508091505092915050565b600060408201905061266e6000830185612503565b818103602083015261268081846125e3565b90509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026126eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826126ae565b6126f586836126ae565b95508019841693508086168417925050509392505050565b600061272861272361271e846116ea565b611ab7565b6116ea565b9050919050565b6000819050919050565b6127428361270d565b61275661274e8261272f565b8484546126bb565b825550505050565b600090565b61276b61275e565b612776818484612739565b505050565b5b8181101561279a5761278f600082612763565b60018101905061277c565b5050565b601f8211156127df576127b081612689565b6127b98461269e565b810160208510156127c8578190505b6127dc6127d48561269e565b83018261277b565b50505b505050565b600082821c905092915050565b6000612802600019846008026127e4565b1980831691505092915050565b600061281b83836127f1565b9150826002028217905092915050565b6128348261199d565b67ffffffffffffffff81111561284d5761284c611736565b5b6128578254611f31565b61286282828561279e565b600060209050601f8311600181146128955760008415612883578287015190505b61288d858261280f565b8655506128f5565b601f1984166128a386612689565b60005b828110156128cb578489015182556001820191506020850194506020810190506128a6565b868310156128e857848901516128e4601f8916826127f1565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612937826116ea565b9150612942836116ea565b925082612952576129516128fd565b5b828206905092915050565b6000612968826116ea565b9150612973836116ea565b925082820390508181111561298b5761298a61201c565b5b9291505056fea2646970667358221220fa38ecb514d4873ae083efe144ac1819f228e9c8ace977df3e1ad7e1f168d4da64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80638da5cb5b116100a0578063c31c9c0711610064578063c31c9c07146103bc578063da7f08b8146103e7578063e4f39ccb14610412578063f2fde38b1461043d578063fc2a88c3146104665761012a565b80638da5cb5b146102d5578063ad5c464814610300578063af6c798a1461032b578063b0ff40e71461036a578063b859b743146103935761012a565b806362747e42116100e757806362747e4214610202578063715018a61461022d578063747b731614610244578063813f0e5a1461028157806389476069146102ac5761012a565b80630e2c871f1461012f57806329c275b6146101585780633b2bcbf1146101975780633ccfd60b146101c25780634f8338fa146101d95761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190611914565b610491565b005b34801561016457600080fd5b5061017f600480360381019061017a9190611970565b610537565b60405161018e93929190611a79565b60405180910390f35b3480156101a357600080fd5b506101ac6106d6565b6040516101b99190611b16565b60405180910390f35b3480156101ce57600080fd5b506101d76106fa565b005b3480156101e557600080fd5b5061020060048036038101906101fb9190611b31565b610752565b005b34801561020e57600080fd5b50610217610d91565b6040516102249190611bf5565b60405180910390f35b34801561023957600080fd5b50610242610e1f565b005b34801561025057600080fd5b5061026b60048036038101906102669190611c89565b610e33565b6040516102789190611cd8565b60405180910390f35b34801561028d57600080fd5b50610296610f49565b6040516102a39190611cd8565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190611d1f565b610f4f565b005b3480156102e157600080fd5b506102ea611059565b6040516102f79190611d4c565b60405180910390f35b34801561030c57600080fd5b50610315611083565b6040516103229190611d4c565b60405180910390f35b34801561033757600080fd5b50610352600480360381019061034d9190611970565b6110a7565b60405161036193929190611a79565b60405180910390f35b34801561037657600080fd5b50610391600480360381019061038c9190611970565b611196565b005b34801561039f57600080fd5b506103ba60048036038101906103b59190611d93565b6111a8565b005b3480156103c857600080fd5b506103d1611294565b6040516103de9190611e23565b60405180910390f35b3480156103f357600080fd5b506103fc6112b8565b6040516104099190611cd8565b60405180910390f35b34801561041e57600080fd5b506104276112c5565b6040516104349190611cd8565b60405180910390f35b34801561044957600080fd5b50610464600480360381019061045f9190611d1f565b6112cb565b005b34801561047257600080fd5b5061047b611351565b6040516104889190611cd8565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105285733816040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161051f929190611e3e565b60405180910390fd5b6105328383611357565b505050565b60606000806006805490508410610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90611eb3565b60405180910390fd5b60006006858154811061059957610598611ed3565b5b90600052602060002090600202016040518060600160405290816000820180546105c290611f31565b80601f01602080910402602001604051908101604052809291908181526020018280546105ee90611f31565b801561063b5780601f106106105761010080835404028352916020019161063b565b820191906000526020600020905b81548152906001019060200180831161061e57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151935093509350509193909250565b7f000000000000000000000000000000000000000000000000000000000000000081565b61070261137a565b61070a611059565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561074f573d6000803e3d6000fd5b50565b61075a61137a565b60008060005b6006805490508110156108495784805190602001206006828154811061078957610788611ed3565b5b90600052602060002090600202016000016040516107a79190612005565b60405180910390200361083657600681815481106107c8576107c7611ed3565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600681815481106108105761080f611ed3565b5b906000526020600020906002020160010160149054906101000a900460ff169150610849565b80806108419061204b565b915050610760565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108bc577f563ebd046dc43cc5667717e18c14710259a4632f4366792e5cd6cc73181b07e8846040516108ad9190612093565b60405180910390a15050610d8c565b8215610b2b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006004546040518363ffffffff1660e01b815260040161093f9291906120b5565b6020604051808303816000875af115801561095e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098291906120f3565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200161038442610a5a9190612120565b8152602001600454815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610aa59190612241565b6020604051808303816000875af1158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190612272565b50847ffe937b9910f382875858f98d3eb21489abb83ab3a3c479a2f38f3e22e18a551c6004546001604051610b1e9291906122ae565b60405180910390a2610d89565b600081600a610b3a919061240a565b600554610b479190612455565b90508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610ba49291906120b5565b6020604051808303816000875af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be791906120f3565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200161038442610cbf9190612120565b815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610d089190612241565b6020604051808303816000875af1158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190612272565b50857ffe937b9910f382875858f98d3eb21489abb83ab3a3c479a2f38f3e22e18a551c826000604051610d7f9291906122ae565b60405180910390a2505b50505b505050565b60028054610d9e90611f31565b80601f0160208091040260200160405190810160405280929190818152602001828054610dca90611f31565b8015610e175780601f10610dec57610100808354040283529160200191610e17565b820191906000526020600020905b815481529060010190602001808311610dfa57829003601f168201915b505050505081565b610e2761137a565b610e316000611401565b565b6000610e3d61137a565b6000604051602001610e4e906124ee565b6040516020818303038152906040528051906020012090506000610e7285836114c7565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166378cb441f85836040518363ffffffff1660e01b8152600401610ecf929190612659565b6020604051808303816000875af1158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f129190612272565b9250827f35627151f04080049c4603628b94879b241dc64b255b7347a7632165d45ee51e60405160405180910390a2505092915050565b60055481565b610f5761137a565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610f7b611059565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fb49190611d4c565b602060405180830381865afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190612272565b6040518363ffffffff1660e01b81526004016110129291906120b5565b6020604051808303816000875af1158015611031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105591906120f3565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600681815481106110b757600080fd5b90600052602060002090600202016000915090508060000180546110da90611f31565b80601f016020809104026020016040519081016040528092919081815260200182805461110690611f31565b80156111535780601f1061112857610100808354040283529160200191611153565b820191906000526020600020905b81548152906001019060200180831161113657829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b61119e61137a565b8060048190555050565b6111b061137a565b600660405180606001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1681525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081611224919061282b565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360ff1602179055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600680549050905090565b60045481565b6112d361137a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113455760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161133c9190611d4c565b60405180910390fd5b61134e81611401565b50565b60035481565b600081600001519050600082602001519050611374848383610752565b50505050565b61138261152d565b73ffffffffffffffffffffffffffffffffffffffff166113a0611059565b73ffffffffffffffffffffffffffffffffffffffff16146113ff576113c361152d565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016113f69190611d4c565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6114cf61164f565b611525837f000000000000000000000000000000000000000000000000000000000000000060008086815260200190815260200160002060009054906101000a900460e01b84611535909392919063ffffffff16565b905092915050565b600033905090565b61153d61164f565b61154d85608001516101006115e5565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6115ed6116bc565b60006020836115fc919061292c565b146116285760208261160e919061292c565b602061161a919061295d565b826116259190612120565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600081526020016116b66116bc565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6116fd816116ea565b811461170857600080fd5b50565b60008135905061171a816116f4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61176e82611725565b810181811067ffffffffffffffff8211171561178d5761178c611736565b5b80604052505050565b60006117a06116d6565b90506117ac8282611765565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156117db576117da611736565b5b6117e482611725565b9050602081019050919050565b82818337600083830152505050565b600061181361180e846117c0565b611796565b90508281526020810184848401111561182f5761182e6117bb565b5b61183a8482856117f1565b509392505050565b600082601f830112611857576118566117b6565b5b8135611867848260208601611800565b91505092915050565b60008115159050919050565b61188581611870565b811461189057600080fd5b50565b6000813590506118a28161187c565b92915050565b6000604082840312156118be576118bd611720565b5b6118c86040611796565b9050600082013567ffffffffffffffff8111156118e8576118e76117b1565b5b6118f484828501611842565b600083015250602061190884828501611893565b60208301525092915050565b6000806040838503121561192b5761192a6116e0565b5b60006119398582860161170b565b925050602083013567ffffffffffffffff81111561195a576119596116e5565b5b611966858286016118a8565b9150509250929050565b600060208284031215611986576119856116e0565b5b60006119948482850161170b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119d75780820151818401526020810190506119bc565b60008484015250505050565b60006119ee8261199d565b6119f881856119a8565b9350611a088185602086016119b9565b611a1181611725565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4782611a1c565b9050919050565b611a5781611a3c565b82525050565b600060ff82169050919050565b611a7381611a5d565b82525050565b60006060820190508181036000830152611a9381866119e3565b9050611aa26020830185611a4e565b611aaf6040830184611a6a565b949350505050565b6000819050919050565b6000611adc611ad7611ad284611a1c565b611ab7565b611a1c565b9050919050565b6000611aee82611ac1565b9050919050565b6000611b0082611ae3565b9050919050565b611b1081611af5565b82525050565b6000602082019050611b2b6000830184611b07565b92915050565b600080600060608486031215611b4a57611b496116e0565b5b6000611b588682870161170b565b935050602084013567ffffffffffffffff811115611b7957611b786116e5565b5b611b8586828701611842565b9250506040611b9686828701611893565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000611bc782611ba0565b611bd18185611bab565b9350611be18185602086016119b9565b611bea81611725565b840191505092915050565b60006020820190508181036000830152611c0f8184611bbc565b905092915050565b6000819050919050565b611c2a81611c17565b8114611c3557600080fd5b50565b600081359050611c4781611c21565b92915050565b600063ffffffff82169050919050565b611c6681611c4d565b8114611c7157600080fd5b50565b600081359050611c8381611c5d565b92915050565b60008060408385031215611ca057611c9f6116e0565b5b6000611cae85828601611c38565b9250506020611cbf85828601611c74565b9150509250929050565b611cd2816116ea565b82525050565b6000602082019050611ced6000830184611cc9565b92915050565b611cfc81611a3c565b8114611d0757600080fd5b50565b600081359050611d1981611cf3565b92915050565b600060208284031215611d3557611d346116e0565b5b6000611d4384828501611d0a565b91505092915050565b6000602082019050611d616000830184611a4e565b92915050565b611d7081611a5d565b8114611d7b57600080fd5b50565b600081359050611d8d81611d67565b92915050565b600080600060608486031215611dac57611dab6116e0565b5b600084013567ffffffffffffffff811115611dca57611dc96116e5565b5b611dd686828701611842565b9350506020611de786828701611d0a565b9250506040611df886828701611d7e565b9150509250925092565b6000611e0d82611ae3565b9050919050565b611e1d81611e02565b82525050565b6000602082019050611e386000830184611e14565b92915050565b6000604082019050611e536000830185611a4e565b611e606020830184611a4e565b9392505050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000611e9d6013836119a8565b9150611ea882611e67565b602082019050919050565b60006020820190508181036000830152611ecc81611e90565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f4957607f821691505b602082108103611f5c57611f5b611f02565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154611f8f81611f31565b611f998186611f62565b94506001821660008114611fb45760018114611fc957611ffc565b60ff1983168652811515820286019350611ffc565b611fd285611f6d565b60005b83811015611ff457815481890152600182019150602081019050611fd5565b838801955050505b50505092915050565b60006120118284611f82565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612056826116ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120885761208761201c565b5b600182019050919050565b600060208201905081810360008301526120ad81846119e3565b905092915050565b60006040820190506120ca6000830185611a4e565b6120d76020830184611cc9565b9392505050565b6000815190506120ed8161187c565b92915050565b600060208284031215612109576121086116e0565b5b6000612117848285016120de565b91505092915050565b600061212b826116ea565b9150612136836116ea565b925082820190508082111561214e5761214d61201c565b5b92915050565b61215d81611a3c565b82525050565b600062ffffff82169050919050565b61217b81612163565b82525050565b61218a816116ea565b82525050565b61219981611a1c565b82525050565b610100820160008201516121b66000850182612154565b5060208201516121c96020850182612154565b5060408201516121dc6040850182612172565b5060608201516121ef6060850182612154565b5060808201516122026080850182612181565b5060a082015161221560a0850182612181565b5060c082015161222860c0850182612181565b5060e082015161223b60e0850182612190565b50505050565b600061010082019050612257600083018461219f565b92915050565b60008151905061226c816116f4565b92915050565b600060208284031215612288576122876116e0565b5b60006122968482850161225d565b91505092915050565b6122a881611870565b82525050565b60006040820190506122c36000830185611cc9565b6122d0602083018461229f565b9392505050565b60008160011c9050919050565b6000808291508390505b600185111561232e5780860481111561230a5761230961201c565b5b60018516156123195780820291505b8081029050612327856122d7565b94506122ee565b94509492505050565b6000826123475760019050612403565b816123555760009050612403565b816001811461236b5760028114612375576123a4565b6001915050612403565b60ff8411156123875761238661201c565b5b8360020a91508482111561239e5761239d61201c565b5b50612403565b5060208310610133831016604e8410600b84101617156123d95782820a9050838111156123d4576123d361201c565b5b612403565b6123e684848460016122e4565b925090508184048111156123fd576123fc61201c565b5b81810290505b9392505050565b6000612415826116ea565b915061242083611a5d565b925061244d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612337565b905092915050565b6000612460826116ea565b915061246b836116ea565b9250828202612479816116ea565b915082820484148315176124905761248f61201c565b5b5092915050565b600081905092915050565b7f737472696e67416e64626f6f6c00000000000000000000000000000000000000600082015250565b60006124d8600d83612497565b91506124e3826124a2565b600d82019050919050565b60006124f9826124cb565b9150819050919050565b61250c81611c4d565b82525050565b61251b81611c17565b82525050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61255681612521565b82525050565b600082825260208201905092915050565b600061257882611ba0565b612582818561255c565b93506125928185602086016119b9565b61259b81611725565b840191505092915050565b600060408301600083015184820360008601526125c3828261256d565b91505060208301516125d86020860182612181565b508091505092915050565b600060a0830160008301516125fb6000860182612512565b50602083015161260e6020860182612154565b506040830151612621604086018261254d565b5060608301516126346060860182612181565b506080830151848203608086015261264c82826125a6565b9150508091505092915050565b600060408201905061266e6000830185612503565b818103602083015261268081846125e3565b90509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026126eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826126ae565b6126f586836126ae565b95508019841693508086168417925050509392505050565b600061272861272361271e846116ea565b611ab7565b6116ea565b9050919050565b6000819050919050565b6127428361270d565b61275661274e8261272f565b8484546126bb565b825550505050565b600090565b61276b61275e565b612776818484612739565b505050565b5b8181101561279a5761278f600082612763565b60018101905061277c565b5050565b601f8211156127df576127b081612689565b6127b98461269e565b810160208510156127c8578190505b6127dc6127d48561269e565b83018261277b565b50505b505050565b600082821c905092915050565b6000612802600019846008026127e4565b1980831691505092915050565b600061281b83836127f1565b9150826002028217905092915050565b6128348261199d565b67ffffffffffffffff81111561284d5761284c611736565b5b6128578254611f31565b61286282828561279e565b600060209050601f8311600181146128955760008415612883578287015190505b61288d858261280f565b8655506128f5565b601f1984166128a386612689565b60005b828110156128cb578489015182556001820191506020850194506020810190506128a6565b868310156128e857848901516128e4601f8916826127f1565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612937826116ea565b9150612942836116ea565b925082612952576129516128fd565b5b828206905092915050565b6000612968826116ea565b9150612973836116ea565b925082820390508181111561298b5761298a61201c565b5b9291505056fea2646970667358221220fa38ecb514d4873ae083efe144ac1819f228e9c8ace977df3e1ad7e1f168d4da64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addMemeCoin(string,address,uint8)": {
        "params": {
          "addr": "The contract address of the memecoin",
          "decimals": "The decimals of the memecoin",
          "name": "The name of the memecoin"
        }
      },
      "getMemeCoin(uint256)": {
        "params": {
          "index": "The index in the memecoins array"
        },
        "returns": {
          "addr": "The memecoin contract address",
          "decimals": "The decimals of the memecoin",
          "name": "The memecoin name"
        }
      },
      "getMemeCoinCount()": {
        "returns": {
          "_0": "The length of the memecoins array"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMemeCoin(string,address,uint8)": {
        "notice": "Add a new memecoin to the list"
      },
      "getMemeCoin(uint256)": {
        "notice": "Get a memecoin by index"
      },
      "getMemeCoinCount()": {
        "notice": "Get the total number of memecoins in the list"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 417,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "sTypeIdToFunctionSelector",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes4)"
      },
      {
        "astId": 8,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2052,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "lastResponse",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2054,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2057,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "wethAmountForTrade",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2060,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "memeCoinAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2071,
        "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
        "label": "memeCoins",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(MemeCoin)2067_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MemeCoin)2067_storage)dyn_storage": {
        "base": "t_struct(MemeCoin)2067_storage",
        "encoding": "dynamic_array",
        "label": "struct MockTradeMemeCoin.MemeCoin[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MemeCoin)2067_storage": {
        "encoding": "inplace",
        "label": "struct MockTradeMemeCoin.MemeCoin",
        "members": [
          {
            "astId": 2062,
            "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2064,
            "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2066,
            "contract": "src/mock/MockTradeMemeCoin.sol:MockTradeMemeCoin",
            "label": "decimals",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}